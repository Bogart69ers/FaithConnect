@model FaithConnect.ViewModel.GroupViewModel

@{

    ViewBag.Title = "Group";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<link rel="stylesheet" href="~/Assets/Groups/css/StyleGroup.css" />

<style>
    .groups-sidebar-button.active{
        width : 250px;
    }

    .groups-sidebar-button{
        width : 250px;        
    }

    .btn-custom {
        background-color: #d6c4a7;
        color: white;
        border: none;
        width: 100%;
        text-align: center;
        padding: 5px 0;
    }
    .btn-add {
        background-color: #d6c4a7;
        color: white;
        border: none;
        border-radius: 10px;
        width: 10%;
        text-align: center;
        margin-top: 10px;
        padding: 10px 0;
    }

        .btn-custom:hover {
            background-color: #b8a58a;
            color: white;
        }

    
</style>
<div class="container mt-4">
    <div class="row">
        <div class="col-3">
            <div class="groups-sidebar">
                <input type="text" class="form-control mb-3" placeholder="Search Groups">
                <button id="discoverBtn" class="groups-sidebar-button active">
                    <span class="input-icon-addon"><i class="fa fa-search"></i></span> Discover
                </button>
                <button id="myGroupsBtn" class="groups-sidebar-button">
                    <span class="input-icon-addon"><i class="fa fa-users"></i></span> My Groups
                </button>
                <button id="PendingApprovalBtn" class="groups-sidebar-button">
                    <span class="input-icon-addon"><i class="fa fa-users"></i></span> Pending Admin Approval
                </button>
                <button id="createGroupBtn" class="groups-sidebar-button">
                    <span class="input-icon-addon"><i class="fa fa-plus-circle"></i></span> Create Group
                </button>
            </div>
        </div>
        <div class="col-9">
            <div id="discoverGroups" class="groups-content active">
                <h4>Suggested for you</h4>
                <div class="groups-grid">
                    @foreach (var group in Model.AllGroups.Where(m => m.status == 1))
                    {
                        string coverImage = string.IsNullOrEmpty(group.GroupImage?.FirstOrDefault()?.coverPhoto)
                                            ? Url.Content("~/UploadedFiles/default-cover.jpg")
                                            : Url.Content("~/UploadedFiles/" + group.GroupImage.FirstOrDefault()?.coverPhoto);

                        var memberCount = Model.GroupMemberships.Count(m => m.groupId == group.id && m.status == 1); // Count members only with joined status
                        <div class="group-card">
                            <img src="@coverImage" alt="Group image">
                            <div class="group-info">
                                <h5><a href="@Url.Action("GroupDetail", "Home", new { groupId = group.id })" style="color: black; font-weight: bold; text-decoration: none;">@group.groupName</a></h5>
                                <p>Members @memberCount</p>
                                <form action="@Url.Action("JoinGroup", "Home")" method="post">
                                    <input type="hidden" name="groupId" value="@group.id" />
                                    <button type="submit" class="btn btn-custom">Join Group</button>
                                </form>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div id="myGroups" class="groups-content">
                <div class="row">
                    <div class="col-md-8">
                        <h4>My Groups</h4>
                        <div class="groups-grid">
                            @foreach (var item in Model.GroupMemberships.Where(m => m.status == 1 && m.userId == Model.UserInformation.id))
                            {                               
                                var memberCount = Model.GroupMemberships.Count(m => m.groupId == item.groupId && m.status == 1 ); // Count members only with joined status
                                <div class="group-card">
                                    <img src="~/UploadedFiles/default-cover.jpg" alt="Group image">
                                    <div class="group-info">
                                        <h5><a href="@Url.Action("GroupDetail", "Home", new { groupId = item.groupId })" style="color: black; font-weight: bold; text-decoration: none;">@item.Groups.groupName</a></h5>
                                        <p>Members @memberCount</p>
                                        <p>You joined on @(item.dateJoined.HasValue ? item.dateJoined.Value.ToString("MMMM dd, yyyy") : "No date available")</p>
                                        <form action="@Url.Action("GroupDetail", "Home", new { groupId = item.groupId })" method="get">
                                            <input type="hidden" name="groupId" value="@item.groupId" />
                                            <button type="submit" class="btn btn-custom">View Group</button>
                                        </form>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-4">
                        <h4>Pending group requests (@Model.GroupMemberships.Count(m => m.status == 0 && m.userId == Model.UserInformation.id))</h4>
                        <div class="groups-grid">
                            @foreach (var group in Model.GroupMemberships.Where(m => m.status == 0 && m.userId == Model.UserInformation.id))
                            {
                                var memberCount = Model.GroupMemberships.Count(m => m.groupId == group.groupId && m.status == 1); // Count members only with joined status
                                <div class="group-card">
                                    <img src="~/UploadedFiles/default-cover.jpg" alt="Group image">
                                    <div class="group-info">
                                        <h5><a href="@Url.Action("GroupDetail", "Home", new { groupId = group.groupId })" style="color: black; font-weight: bold; text-decoration: none;">@group.Groups.groupName</a></h5>
                                        <p>Members @memberCount</p>
                                        <p>You requested on @(group.dateJoined.HasValue ? group.dateJoined.Value.ToString("MMMM dd, yyyy") : "No date available")</p>
                                        <form action="@Url.Action("GroupDetail", "Home", new { groupId = group.groupId })" method="get">
                                            <input type="hidden" name="groupId" value="@group.groupId" />
                                            <button type="submit" class="btn btn-custom">View Group</button>
                                        </form>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div id="PendingApproval" class="groups-content">
                <div class="row">
                    <div class="col-md-8">
                        <h4>Pending Admin Approval</h4>
                        <div class="groups-grid">
                            @foreach (var item in Model.Group.Where(m => m.status == 0 && m.groupAdmin == Model.UserInformation.userId))
                            {
                                string coverImage = string.IsNullOrEmpty(item.GroupImage?.FirstOrDefault()?.coverPhoto)
                                            ? Url.Content("~/UploadedFiles/default-cover.jpg")
                                            : Url.Content("~/UploadedFiles/" + item.GroupImage.FirstOrDefault()?.coverPhoto);

                                var memberCount = Model.GroupMemberships.Count(m => m.groupId == item.id && m.status == 1); // Count members only with joined status
                                <div class="group-card">
                                    <img src="@coverImage" alt="Group image">
                                    <div class="group-info">
                                        <h5><a href="@Url.Action("GroupDetail", "Home", new { groupId = item.id })" style="color: black; font-weight: bold; text-decoration: none;">@item.groupName</a></h5>
                                        <p>Members @memberCount</p>
                                        <form action="@Url.Action("GroupDetail", "Home", new { groupId = item.id })" method="get">
                                            <input type="hidden" name="groupId" value="@item.id" />
                                            <button type="submit" class="btn btn-custom">View Group</button>
                                        </form>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div id="createGroup" class="groups-content">
                <h4>Create Group</h4>
                    <div class="card">
                        <div class="card-body">
                            @using (Html.BeginForm("CreateGroup", "Home", FormMethod.Post))
                            {

                                <div class="form-group">
                                    <label for="groupName">Group Name</label>
                                    <div class="input-icon">
                                        <span class="input-icon-addon"><i class="fa fa-users"></i></span>
                                        <input type="text" class="form-control" id="groupName" name="groupName" placeholder="Group Name" required>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="privacy">Choose privacy</label>
                                    <select class="form-control" id="privacy" name="privacy">
                                        <option value="public">
                                            Public
                                        </option>
                                        <option value="private">
                                            Private
                                        </option>
                                    </select>
                                </div>

                                <div class="form-group" hidden>
                                    <label for="groupAdmin">Group Admin (ID number)</label>
                                    <input type="number" class="form-control" id="groupAdmin" name="groupAdmin"
                                           value="@Model.UserInformation.userId"
                                           readonly
                                           style="background-color: #e9ecef; color: #495057;">
                                </div>

                                <div class="form-group">
                                    <label for="description">Description</label>
                                    <div class="input-icon">
                                        <span class="input-icon-addon"><i class="fa fa-info-circle"></i></span>
                                        <textarea class="form-control" id="description" name="description" placeholder="Description" required></textarea>
                                    </div>
                                </div>
                                <button type="submit" class="btn-add">Create</button>
                            }
                        </div>
                    </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const discoverBtn = document.getElementById('discoverBtn');
        const myGroupsBtn = document.getElementById('myGroupsBtn');
        const discoverGroups = document.getElementById('discoverGroups');
        const myGroups = document.getElementById('myGroups');
        const createGroup = document.getElementById('createGroup');
        const createGroupBtn = document.getElementById('createGroupBtn');
        const PendingApprovalBtn = document.getElementById('PendingApprovalBtn');
        const PendingApproval = document.getElementById('PendingApproval');



        // Set the initial active tab and content
        discoverBtn.classList.add('active');
        discoverGroups.classList.add('active');

        discoverBtn.addEventListener('click', function () {
            discoverBtn.classList.add('active');
            myGroupsBtn.classList.remove('active');
            createGroupBtn.classList.remove('active');
            discoverGroups.classList.add('active');
            myGroups.classList.remove('active');
            createGroup.classList.remove('active');
            PendingApprovalBtn.classList.remove('active');
            PendingApproval.classList.remove('active');
        });

        myGroupsBtn.addEventListener('click', function () {
            myGroupsBtn.classList.add('active');
            discoverBtn.classList.remove('active');
            createGroupBtn.classList.remove('active');
            myGroups.classList.add('active');
            discoverGroups.classList.remove('active');
            createGroup.classList.remove('active');
            PendingApprovalBtn.classList.remove('active');
            PendingApproval.classList.remove('active');
        });

        createGroupBtn.addEventListener('click', function () {
            myGroupsBtn.classList.remove('active');
            discoverBtn.classList.remove('active');
            createGroupBtn.classList.add('active');
            myGroups.classList.remove('active');
            discoverGroups.classList.remove('active');
            createGroup.classList.add('active');
            PendingApprovalBtn.classList.remove('active');
            PendingApproval.classList.remove('active');
        });

        PendingApprovalBtn.addEventListener('click', function () {
            myGroupsBtn.classList.remove('active');
            PendingApprovalBtn.classList.add('active');
            PendingApproval.classList.add('active');
            discoverBtn.classList.remove('active');
            createGroupBtn.classList.remove('active');
            myGroups.classList.remove('active');
            discoverGroups.classList.remove('active');
            createGroup.classList.remove('active');

        });
    });

</script>
