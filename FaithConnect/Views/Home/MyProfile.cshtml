@using Newtonsoft.Json

@model FaithConnect.ViewModel.GroupViewModel

@{
    string userName = "User";

    var currentUserId = ViewBag.CurrentUserId;
    var userInfo = Model.UserInformation;

    userName = userInfo.first_name + " " + userInfo.last_name;

    ViewBag.Title = "MyProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="~/Assets/signup/css/style.css" rel="stylesheet">
<link href="~/Assets/signup/css/style2.css" rel="stylesheet">

<style>
    .modal-header {
        flex-wrap: nowrap;
        justify-content: flex-start;
        gap: 10px; /* Space between profile picture and text */
        padding: 10px 15px;
        background-color: #f8f9fa;
    }

    /* Profile Picture Styling */
    .profile-picture {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 50%;
        border: 1px solid #ddd;
    }

    /* Profile Details Styling */
    .profile-details {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .profile-details h5 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        color: #333;
    }

    .profile-details small {
        font-size: 0.875rem;
        color: #777;
    }

    /* Close Button Styling */
    .modal-close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 1.8rem;
        color: #333;
        background: none;
        border: none;
        cursor: pointer;
        z-index: 1051;
        transition: transform 0.2s, color 0.2s;
    }

    .modal-close-btn:hover {
        color: #ff0000;
        transform: scale(1.2);
    }

    /* Focus effect for accessibility */
    .modal-close-btn:focus {
        outline: none;
        box-shadow: none;
    }

    /* Ensure modal content maintains proper positioning */
    .modal-content {
        position: relative;
    }
    #mediaPreview img,
    #mediaPreview video {
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .post-media .img-thumbnail {
        width: 500px;
        height: 200px; /* Fixed height for grid images */
        object-fit: cover;
        cursor: pointer;
    }

    .carousel-item img {
        height: 500px; /* Adjust the height of images in the carousel */
        object-fit: contain;
    }    

    .carousel-control-prev,
    .carousel-control-next {
        display: flex;
        margin-left: -10px;
        margin-right: -10px;
    }

    /* Hide arrows gracefully when not needed */
    .carousel-control-prev[style*="display: none"],
    .carousel-control-next[style*="display: none"] {
        display: none !important;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        filter: invert(0%) sepia(100%) saturate(0%) hue-rotate(0deg) brightness(0%) contrast(100%);
    }

    /* Optional: Adjust arrow size */
    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        width: 40px;
        height: 40px;
    }

    /* Ensure visibility on hover */
    .carousel-control-prev:hover .carousel-control-prev-icon,
    .carousel-control-next:hover .carousel-control-next-icon {
        filter: invert(0%) sepia(100%) saturate(0%) hue-rotate(0deg) brightness(0%) contrast(100%);
        opacity: 0.8;
    }
    /* New Styles for Single Image Posts */
    .single-image-container {
        display: flex;
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically if there's a set height */
        width: 100%;
        margin: 0 auto; /* Ensure centering within parent container */
    }

    /* Ensure the image fits well */
    .single-post-image {
        width: 1000px; /* Prevent the image from overflowing */
        max-height: 500px; /* Adjust max height if necessary */
        object-fit: contain; /* Maintain image proportions */
        border-radius: 8px; /* Optional: Add rounded corners */
    }
    .modals {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modals-content {
        background-color: white;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 35%;
    }
    .masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        grid-auto-rows: 200px;
        gap: 10px;
    }

    .masonry-item {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
    }

    .masonry-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        position:absolute;
    }

    .masonry-item.overlay-item {
        filter: brightness(0.7);
    }

    .masonry-item.overlay-item .overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.6);
        color: #fff;
        font-size: 1.5rem;
        font-weight: bold;
        padding: 8px 12px;
        border-radius: 4px;
        z-index: 2;
    }
    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        position: absolute;
        top: 10px;
        right: 25px;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .event-day {
        cursor: pointer;
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 5px;
    }

    .tooltip {
        position: absolute;
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        display: none;
        z-index: 1050;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>

    <div class="container">
        <div class="profile-page tx-13">
            <div class="row">
                
                <div class="col-12 grid-margin">
                    <div class="profile-header">
                        <div class="cover">
                            <div class="gray-shade"></div>
                            <figure>
                                @{
                                    string coverImage = string.IsNullOrEmpty(Model.UserInformation.Image.FirstOrDefault()?.coverPhoto) ? Url.Content("~/UploadedFiles/default-cover.jpg") : Url.Content("~/UploadedFiles/" + Model.UserInformation.Image.FirstOrDefault()?.coverPhoto);
                                }
                                <img src="@coverImage" class="img-fluid" alt="profile cover" style="height: 500px; object-fit: cover;">
                            </figure>
                            <div class="cover-body d-flex justify-content-between align-items-center">
                                <div>
                                    @{
                                        string profileImage = string.IsNullOrEmpty(Model.UserInformation.Image.FirstOrDefault()?.imageFile) ? Url.Content("~/UploadedFiles/default.png") : Url.Content("~/UploadedFiles/" + Model.UserInformation.Image.FirstOrDefault()?.imageFile);
                                    }
                                    <img class="rounded-circle me-2" src="@profileImage" alt="profile" style="width: 120px; height: 120px; object-fit: cover;border: 3px solid white; border-radius: 50%; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);">
                                    <span class="profile-name">@Model.UserInformation.first_name @Model.UserInformation.last_name</span>
                                </div>
                                <div class="d-none d-md-block">
                                    <button class="btn btn-primary btn-icon-text btn-edit-profile" data-toggle="modal" data-target="#editProfileModal">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit btn-icon-prepend">
                                            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                        </svg> Edit profile
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="header-links">
                            <ul class="links d-flex align-items-center mt-3 mt-md-0">
                                <!-- Add other links as needed -->
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row profile-body">
                <!-- Left sidebar -->
                <div class="d-none d-md-block col-md-4 col-xl-3 left-wrapper">
                    <div class="card rounded">
                        <div class="card-body">
                            <div class="d-flex align-items-center justify-content-between mb-2">
                                <h6 class="card-title mb-0">About</h6>
                            </div>
                            <p>@(Model.UserInformation.bio ?? "No bio available.")</p>
                            <div class="mt-3">
                                <label class="tx-11 font-weight-bold mb-0 text-uppercase">Joined:</label>
                                <p class="text-muted">
                                    @(Model.UserInformation.date_created.HasValue ? Model.UserInformation.date_created.Value.ToString("MMMM dd, yyyy") : "N/A")
                                </p>
                            </div>
                            <div class="mt-3">
                                <label class="tx-11 font-weight-bold mb-0 text-uppercase">Address:</label>
                                <p class="text-muted">@Model.UserInformation.address</p>
                            </div>
                            <div class="mt-3">
                                <label class="tx-11 font-weight-bold mb-0 text-uppercase">Email:</label>
                                <p class="text-muted">@Model.UserInformation.email</p>
                            </div>
                            <div class="mt-3 d-flex social-links">
                                <!-- Social links -->
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Middle section -->
                <div class="col-md-8">
                    @if (Model.RepostedPosts != null && Model.RepostedPosts.Any())
                    {
                        foreach (var post in Model.RepostedPosts)
                        {
                            var user = Model.UserInformations.FirstOrDefault(u => u.userId == post.createdBy);
                            string profilePicture = user != null && user.Image != null && user.Image.Any()
                                                ? Url.Content("~/UploadedFiles/" + user.Image.FirstOrDefault()?.imageFile)
                                                : Url.Content("~/UploadedFiles/default.png"); // Fallback to default profile picture
                            string fullName = user != null ? $"{user.first_name} {user.last_name}" : "Unknown";

                            <div class="post col-md-20">
                                <!-- Post Header -->
                                <div class="post-header">
                                    <img src="~/Assets/Groups/img/group1.jpg" alt="Group Icon" class="group-icon">
                                    <div class="group-info">
                                        <div class="group-name">@post.Groups.groupName</div>
                                        <div class="post-time">Posted by @post.UserAccount.username</div>
                                        <div class="post-time">
                                            @if (post.date_created.HasValue)
                                            {
                                                @post.date_created.Value.ToString("MMMM dd, yyyy")
                                            }
                                            else
                                            {
                                                <span>No date provided</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="post-options">
                                        <button class="options-button">...</button>
                                        <div class="options-menu">
                                            <a href="#">Hide Post</a>
                                            <a href="#">Save post</a>
                                        </div>
                                    </div>
                                </div>
                                <!-- Post Content -->
                                <div class="post-content">
                                    <p>@post.content</p>
                                </div>
                                @if (post.PostMedia != null && post.PostMedia.Any(m => m.mediaType.StartsWith("Image", StringComparison.OrdinalIgnoreCase)))
                                {
                                    var imageMedia = post.PostMedia.Where(m => m.mediaType.StartsWith("Image", StringComparison.OrdinalIgnoreCase)).ToList();
                                    var imageCount = imageMedia.Count;

                                    if (imageCount == 1)
                                    {
                                        // Single Image
                                        var singleImage = imageMedia.FirstOrDefault();
                                        if (singleImage != null)
                                        {
                                            <div class="post-media mt-2">
                                                <button type="button" class="btn btn-link p-0" data-toggle="modal" data-target="#imageModals"
                                                        data-images='["@Url.Content(singleImage.mediaFile)"]'
                                                        data-profile-picture="@Url.Content(profilePicture)"
                                                        data-user-name="@fullName"
                                                        data-post-title="@post.content">
                                                    <img src="@Url.Content(singleImage.mediaFile)" alt="Post Image" class="img-fluid single-post-image" loading="lazy">
                                                </button>
                                            </div>
                                        }
                                    }
                                    else if (imageCount > 1)
                                    {
                                        // Multiple Images in Masonry Grid
                                        var imageUrls = imageMedia.Select(m => Url.Content(m.mediaFile)).ToList();
                                        var imageUrlsJson = JsonConvert.SerializeObject(imageUrls);

                                        <div class="post-media-wrapper">
                                            <div class="post-media masonry-grid">
                                                @for (var index = 0; index < imageUrls.Count; index++)
                                                {
                                                    var imageUrl = imageUrls[index];
                                                    <div class="masonry-item @(index == 4 && imageCount > 5 ? "overlay-item" : "")">
                                                        <button type="button" class="btn btn-link p-0" data-toggle="modal" data-target="#imageModals"
                                                                data-images='@Html.Raw(imageUrlsJson)'
                                                                data-profile-picture="@Url.Content(profilePicture)"
                                                                data-user-name="@fullName"
                                                                data-post-title="@post.content">
                                                            <img src="@imageUrl" alt="Post Image" class="img-fluid masonry-image" loading="lazy">
                                                            @if (index == 4 && imageCount > 5)
                                                            {
                                                                <div class="overlay">+@(imageCount - 5)</div>
                                                            }
                                                        </button>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }


                                }
                                @if (post.PostMedia != null && post.PostMedia.Any(m => m.mediaType.StartsWith("Video", StringComparison.OrdinalIgnoreCase)))
                                {
                                    var videoMedia = post.PostMedia.Where(m => m.mediaType.StartsWith("Video", StringComparison.OrdinalIgnoreCase)).ToList();

                                    <div class="post-media mt-2">
                                        @foreach (var media in videoMedia)
                                        {
                                            <video controls class="img-fluid mb-2" style="max-width: 100%; height: auto;">
                                                <source src="@Url.Content(media.mediaFile)" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        }
                                    </div>
                                }
                                <span class="input-icon-addon like-count" style="color: #777; font-size: 15px;"><i class="fas fa-heart"></i>  @post.Reaction.Count(r => r.hasLiked == true)</span>

                                <!-- Post Actions -->
                                <div class="post-actions mt-2">
                                    <button class="action-button"
                                            onclick="toggleLike(this, @post.id)"
                                            data-isliked="@(post.Reaction.Any(r => r.userId == currentUserId && r.hasLiked) ? "true" : "false")">
                                        <span class="input-icon-addon">
                                            <i class="@(post.Reaction.Any(r => r.userId == currentUserId && r.hasLiked) ? "fas" : "far") fa-heart"></i>
                                        </span>
                                        @(post.Reaction.Any(r => r.userId == currentUserId && r.hasLiked) ? "Liked" : "Like")
                                    </button>
                                    <button class="action-button" onclick="focusCommentInput(@post.id)">
                                        <span class="input-icon-addon"><i class="fas fa-comment-alt"></i></span> Interact
                                    </button>                                                                    
                                </div>
                                <div id="comments-section-@post.id" class="post-comments">
                                    <div class="post-time" style="font-size:13px; font-weight:bold; padding:10px 0 10px 0">Interactions</div>
                                    @if (post.PostComments != null)
                                    {
                                        foreach (var com in post.PostComments)
                                        {
                                            string profileImages = Url.Content("~/UploadedFiles/default.png");

                                            var commentUserInfo = Model.UserInformations.FirstOrDefault(u => u.userId == com.userId);
                                            var image = commentUserInfo.Image?.ToList();
                                            profileImages = string.IsNullOrEmpty(image?.FirstOrDefault()?.imageFile)
                                            ? Url.Content("~/UploadedFiles/default.png")
                                            : Url.Content("~/UploadedFiles/" + image.FirstOrDefault()?.imageFile);


                                            <div class="post-header">
                                                <img src="@profileImages" alt="User Avatar" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">

                                                <div class="group-info">
                                                    <div class="group-name">@(commentUserInfo != null ? commentUserInfo.first_name + " " + commentUserInfo.last_name : "Unknown User")</div>
                                                    <div class="post-content">@com.comment</div>
                                                </div>
                                            </div>
                                            <br />
                                        }

                                    }
                                    else
                                    {
                                        <p>No comments yet.</p>
                                    }
                                </div>
                                <!-- Interact Input -->
                                <form onsubmit="submitComment(this, @post.id)" style="display: inline;">
                                    <div class="post-interact mt-3">
                                        <input type="hidden" name="groupId" value="@post.groupId" />
                                        <input type="hidden" name="postId" value="@post.id" />
                                        <input type="hidden" name="userId" value="@currentUserId" />
                                        <input type="hidden" name="redirectPage" value="Index" />
                                        <img src="@profileImage" alt="Avatar" class="user-icon" style="width: 45px; height: 45px; object-fit: cover">
                                        <input id="comment-input-@post.id" type="text" name="comment" placeholder="Interact as @userName" class="comment-input">
                                        <button type="submit" class="action-button"><span class="input-icon-addon"><i class="fas fa-paper-plane"></i></span></button>
                                    </div>
                                </form>
                            </div>
                                            }
                                        }

                </div>
                <!-- Right sidebar -->
               
            </div>

        </div>

    </div>


    <!-- Modal for editing profile -->
    <div class="modal fade" id="editProfileModal" tabindex="-1" role="dialog" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @using (Html.BeginForm("MyProfile", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <div class="modal-header">
                        <h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @Html.HiddenFor(model => model.UserInformation.id)
                        @Html.HiddenFor(model => model.UserInformation.userId)
                        @Html.HiddenFor(model => model.UserInformation.date_created)
                        @Html.HiddenFor(model => model.UserInformation.status)
                        @Html.HiddenFor(model => model.UserInformation.religion)
                        <input type="hidden" name="religion" value="@Model.UserInformation.religion" class="form-control">



                        <div class="form-group text-center">
                            <label for="profilePicture">Profile Picture</label>
                            <input type="file" name="profilePicture" id="profilePicture" accept="image/*" class="form-control" onchange="previewImage(event, 'profilePicPreviewContainer')">
                            <div id="profilePicPreviewContainer" class="image-preview-container mt-2 circular-container">
                                <img id="profilePicPreview" src="#" alt="Profile Picture Preview" class="img-fluid preview-image" style="display: none;">
                            </div>
                        </div>
                        <div class="form-group text-center">
                            <label for="coverPhoto">Cover Photo</label>
                            <input type="file" name="coverPhoto" id="coverPhoto" accept="image/*" class="form-control" onchange="previewImage(event, 'coverPhotoPreviewContainer')">
                            <div id="coverPhotoPreviewContainer" class="image-preview-container mt-2 rectangular-container">
                                <img id="coverPhotoPreview" src="#" alt="Cover Photo Preview" class="img-fluid preview-image" style="display: none;">
                            </div>
                        </div>
                       
                        <div class="form-group">
                            <label for="firstname">First Name</label>
                            <input type="text" name="firstname" value="@Model.UserInformation.first_name" class="form-control">
                            @Html.ValidationMessageFor(model => model.UserInformation.first_name, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="lastname">Last Name</label>
                            <input type="text" name="lastname" value="@Model.UserInformation.last_name" class="form-control">
                            @Html.ValidationMessageFor(model => model.UserInformation.last_name, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="phone">Phone</label>
                            <input type="text" name="phone" value="@Model.UserInformation.phone"  class="form-control">
                            @Html.ValidationMessageFor(model => model.UserInformation.phone, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="email">Email</label>
                            <input type="text" name="email" value="@Model.UserInformation.email" class="form-control">
                            @Html.ValidationMessageFor(model => model.UserInformation.email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="bio">Bio</label>
                            <input type="text" name="bio" placeholder="Enter bio" class="form-control">
                            @Html.ValidationMessageFor(model => model.UserInformation.bio, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="address">Address</label>
                            <input type="text" name="address" value="@Model.UserInformation.address" class="form-control">
                            @Html.ValidationMessageFor(model => model.UserInformation.address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <input type="submit" class="btn btn-success" value="Save Changes" style="background-color:saddlebrown" />
                    </div>
                }

            </div>
        </div>
    </div>

    <div class="modal fade" id="imageModals" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <button type="button" class="modal-close-btn" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

                <div class="modal-header align-items-center border-0 d-flex">
                    <img id="modalProfilePicture" src="" alt="Profile Picture" class="rounded-circle profile-picture">
                    <div class="ml-3 profile-details">
                        <h5 id="modalUserName" class="mb-0"></h5>
                        <p id="modalPostTitle"></p>
                    </div>
                </div>

                <div class="modal-body p-0">
                    <!-- Bootstrap Carousel -->
                    <div id="carouselExample" class="carousel slide" data-ride="carousel">
                        <div class="carousel-inner" id="carouselImages">
                            <!-- Dynamically populated images will go here -->
                        </div>
                        <a class="carousel-control-prev" href="#carouselExample" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#carouselExample" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
                <div class="modal-footer p-2">
                    <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/Assets/signup/js/preview.js"></script>

<script>
    function toggleLike(button, postId) {
        const icon = button.querySelector('.input-icon-addon i');
        const isLiked = button.getAttribute('data-isliked') === "true"; // Read current state
        const likeCountElement = button.closest('.post').querySelector('.like-count'); // Locate the like count element

        fetch('/Home/ToggleLike', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postId, isLiked })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update button state
                if (isLiked) {
                    icon.classList.remove('fas');
                    icon.classList.add('far');
                    button.setAttribute('data-isliked', "false");
                } else {
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                    button.setAttribute('data-isliked', "true");
                }

                // Update the like count
                if (likeCountElement) {
                    likeCountElement.innerHTML = `<i class="fas fa-heart"></i> ${data.likeCount}`;
                }
            } else {
                console.error('Failed to toggle like');
            }
        })
        .catch(error => console.error('Error:', error));
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('[data-toggle="modal"]').forEach(button => {
            button.addEventListener('click', function () {
                // Get image array for carousel
                const images = JSON.parse(this.getAttribute('data-images') || '[]');
                const carouselInner = document.getElementById('carouselImages');
                carouselInner.innerHTML = ''; // Clear previous content

                // Populate Carousel
                if (images.length > 0) {
                    images.forEach((src, index) => {
                        const isActive = index === 0 ? 'active' : '';
                        carouselInner.innerHTML += `
                            <div class="carousel-item ${isActive}">
                                <img src="${src}" class="d-block w-100" alt="Post Image">
                            </div>
                        `;
                    });

                    // Show/Hide Arrows based on image count
                    const prevArrow = document.querySelector('.carousel-control-prev');
                    const nextArrow = document.querySelector('.carousel-control-next');

                    if (images.length === 1) {
                        prevArrow.style.display = 'none';
                        nextArrow.style.display = 'none';
                    } else {
                        prevArrow.style.display = 'flex';
                        nextArrow.style.display = 'flex';
                    }
                }

                // Populate Profile Details
                const profilePicture = this.getAttribute('data-profile-picture');
                const userName = this.getAttribute('data-user-name');
                const postTitle = this.getAttribute('data-post-title');

                document.getElementById('modalProfilePicture').src = profilePicture || 'https://via.placeholder.com/50';
                document.getElementById('modalUserName').innerText = userName || 'Unknown User';
                document.getElementById('modalPostTitle').innerText = postTitle || '';

                // Reset carousel to the first slide
                $('#carouselExample').carousel(0);
            });
        });
    });
</script>
<script>
    function focusCommentInput(postId) {
    const inputField = document.getElementById(`comment-input-${postId}`);
    if (inputField) {
        inputField.focus();
    }
}
</script>
<script>
    function submitComment(form, postId) {
        event.preventDefault(); // Prevent normal form submission

        const commentInput = form.querySelector("input[name='comment']");
        const commentText = commentInput.value;

        if (!commentText.trim()) {
            alert("Comment cannot be empty.");
            return;
        }

        const formData = new URLSearchParams(new FormData(form));

        fetch('/Home/AddComment', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                commentInput.value = ''; // Clear the input field

                const commentsSection = document.querySelector(`#comments-section-${postId}`);
                const newComment = `
                    <div class="post-header">
                        <img src="${data.comment.profileImage}" alt="User Avatar" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">
                        <div class="group-info">
                            <div class="group-name">${data.comment.user}</div>
                            <div class="post-content">${data.comment.comment}</div>
                        </div>
                    </div>
                    <br />`;
                commentsSection.insertAdjacentHTML('beforeend', newComment);
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("An unexpected error occurred. Please try again.");
        });
    }
</script>
