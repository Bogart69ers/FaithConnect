@using Newtonsoft.Json
@model dynamic
@{

    string profileImage = Url.Content("~/UploadedFiles/default.png");
    string userName = "User";
    var groupView = Model as FaithConnect.ViewModel.GroupDetailViewModel;
    var currentUserId = ViewBag.CurrentUserId;
    var groupname = ViewBag.GroupName;

    var currentUserInfoId = ViewBag.CurrentUserInfoId;
    var currentGroupId = ViewBag.Currentgroup;
    var memberCount = groupView.GroupMemberships.Count(m => m.groupId == groupView.Group.id && m.status == 1);
    var group = groupView.AllGroupMembers;

    if (Model is FaithConnect.ViewModel.GroupDetailViewModel)
    {
        var groupViewModel = Model as FaithConnect.ViewModel.GroupDetailViewModel;
        var userInfo = groupViewModel.UserInformation;
        var images = userInfo.Image.ToList();
        profileImage = string.IsNullOrEmpty(images.FirstOrDefault()?.imageFile) ? Url.Content("~/UploadedFiles/default.png") : Url.Content("~/UploadedFiles/" + images.FirstOrDefault()?.imageFile);
        userName = userInfo.first_name + " " + userInfo.last_name;
    }

}
@{ 
    ViewBag.Title = Model.Group.groupName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (TempData["ErrorMessage"] != null)
{
    <script>
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: '@TempData["ErrorMessage"]',
            confirmButtonText: 'OK'
        });
    </script>
}

@if (TempData["SuccessMessage"] != null)
{
    <script>
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: '@TempData["SuccessMessage"]',
            timer: 2000,
            showConfirmButton: false
        });
    </script>
}

@if (TempData["WarningMessage"] != null)
{
    <script>
        Swal.fire('Warning', '@TempData["WarningMessage"]', 'warning');
    </script>
}




<link rel="stylesheet" href="~/Assets/Groups/css/GroupDetail.css" />
<link href="~/Assets/signup/css/style.css" rel="stylesheet">
<link href="~/Assets/signup/css/style2.css" rel="stylesheet">
<link href="~/Assets/Index/css/modal.css" rel="stylesheet" />
<style>
.custom-dropdown {
    display: flex;
    align-items: start;
    position: relative;
}

.dropdown-menu-container {
    position: relative;
    flex-grow: 1;
}

.am-pm-switch {
    display: flex;
    flex-direction: column;
    justify-content: start;
    margin-left: 10px; /* Add spacing between dropdown and buttons */
}

.toggle-button {
    width: 60px;
    text-align: center;
    padding: 5px 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f8f9fa;
    color: black;
    cursor: pointer;
    margin-bottom: 5px; /* Spacing between AM and PM buttons */
}

.toggle-button.active {
    background-color: #d6c4a7;
    color: white;
}

.toggle-button:disabled {
    background-color: #e0e0e0;
    color: #6c757d;
    cursor: not-allowed;
}

.dropdown-menu {
    max-height: 200px;
    overflow-y: auto;
    padding: 0;
}

.dropdown-item {
    padding: 10px 15px;
    cursor: pointer;
}

.dropdown-item.disabled {
    color: #ccc;
    pointer-events: none;
}

.dropdown-item:hover:not(.disabled) {
    background-color: #f0f0f0;
    color: #007bff;
}

#timeList {
    max-height: 160px;
    overflow-y: auto;
    padding: 0;
    margin: 0;
    list-style: none;
}






     .modal-header {
        flex-wrap: nowrap;
        justify-content: flex-start;
        gap: 10px; /* Space between profile picture and text */
        padding: 10px 15px;
        background-color: #f8f9fa;
    }
     .profile-picture {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 50%;
        border: 1px solid #ddd;
    }

    /* Profile Details Styling */
    .profile-details {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .profile-details h5 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        color: #333;
    }

    .profile-details small {
        font-size: 0.875rem;
        color: #777;
    }

    .carousel-item img {
        height: 500px; /* Adjust the height of images in the carousel */
        object-fit: contain;
    }    
    .carousel-control-prev,
    .carousel-control-next {
        display: flex;
        margin-left: -10px;
        margin-right: -10px;
    }

    /* Hide arrows gracefully when not needed */
    .carousel-control-prev[style*="display: none"],
    .carousel-control-next[style*="display: none"] {
        display: none !important;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        filter: invert(0%) sepia(100%) saturate(0%) hue-rotate(0deg) brightness(0%) contrast(100%);
    }

    /* Optional: Adjust arrow size */
    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        width: 40px;
        height: 40px;
    }

    /* Ensure visibility on hover */
    .carousel-control-prev:hover .carousel-control-prev-icon,
    .carousel-control-next:hover .carousel-control-next-icon {
        filter: invert(0%) sepia(100%) saturate(0%) hue-rotate(0deg) brightness(0%) contrast(100%);
        opacity: 0.8;
    }
    /* Close Button Styling */
    .modal-close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 1.8rem;
        color: #333;
        background: none;
        border: none;
        cursor: pointer;
        z-index: 1051;
        transition: transform 0.2s, color 0.2s;
    }

    .modal-close-btn:hover {
        color: #ff0000;
        transform: scale(1.2);
    }

    /* Focus effect for accessibility */
    .modal-close-btn:focus {
        outline: none;
        box-shadow: none;
    }

    /* Ensure modal content maintains proper positioning */
    
    .group-header {
        position: relative;
        width: 100%;
        height: 300px;
        overflow: hidden;
        z-index: 1;
    }

    .group-banner {
        width: 100%;
        height: 300px;
        object-fit: cover;
    }

    .group-infos {
        position: absolute;
        bottom: 20px;
        left: 30px;
        z-index: 2;
        color: #fff;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
    }

    /* Navigation Tabs */
    .group-navigation {
        background-color: #fff;
        margin-bottom: 20px;
        z-index: 10;
        padding: 0px 0;
        border-bottom: 1px solid #ccc;
        position: sticky;
        top: 6%;
        border-radius: 10px;
    }

    /* Content Section */
    .tab-content {
        margin-top: 20px;
        z-index: 0;
    }

    /* Masonry Grid for Images */
    .post-media-wrapper {
        margin-top: 20px;
        background-color: #fff;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        grid-auto-rows: 200px;
        gap: 10px;
    }

    .masonry-item {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
    }

    .masonry-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        position:absolute;
    }

    .masonry-item.overlay-item {
        filter: brightness(0.7);
    }

    .masonry-item.overlay-item .overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.6);
        color: #fff;
        font-size: 1.5rem;
        font-weight: bold;
        padding: 8px 12px;
        border-radius: 4px;
        z-index: 2;
    }

    /* Single Image Styling */
    .single-image-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 20px 0;
    }

    .single-post-image {
        width: 100%;
        max-height: 500px;
        object-fit: cover;
        border-radius: 8px;
    }
    /*Calendar styling*/

    .calendar-container {
    text-align: center;
    }

    .calendar-container table {
        width: 100%;
        border-collapse: collapse;
    }

    .calendar-container th, .calendar-container td {
        width: 14.28%;
        height: 50px;
        text-align: center;
        vertical-align: middle;
        font-size: 14px;
        border: 1px solid #f0f0f0;
        cursor: pointer;
    }

    .calendar-container th {
        font-weight: bold;
        background-color: #f9f9f9;
    }

    .calendar-container td span {
        display: inline-block;
        width: 100%;
        height: 100%;
        line-height: 50px;
    }

    .calendar-container td:hover {
        background-color: #e9e9e9;
        border-radius: 5px;
    }

</style>

<div class="container-fluid mt-4">
    <div class="row" style="position:sticky; top:-7%; z-index:1;">
        <div class="col-12">
            <!-- Group Banner Section -->
            <div class="group-header" >
                @{
                    string coverImage = string.IsNullOrEmpty(groupView.Group.GroupImage?.FirstOrDefault()?.coverPhoto)
                                        ? Url.Content("~/UploadedFiles/default-cover.jpg")
                                        : Url.Content("~/UploadedFiles/" + groupView.Group.GroupImage.FirstOrDefault()?.coverPhoto);                }
                <img src="@coverImage" alt="Group Header" class="img-fluid group-banner">
                <div class="group-info" style="position: absolute; bottom: 30px; left: 30px;">
                    <h2>@Model.Group.groupName</h2>
                    
                    <p>@{
                        var member = groupView.GroupMemberships.Count(m => m.groupId == currentGroupId  && m.status == 1);
                        var members = " ";
                        if(member <= 1)
                        {
                            members = "member";
                        }// Count members only with joined status
                        else if (member > 1)
                        {
                            members = "members";
                        }
                    }
                    
                    @member @members</p>
                    <!-- If the logged-in user is the group admin, show the "Edit Group" button -->
                    @if (Model.Group.groupAdmin == currentUserId)
                    {
                        <button class="btn btn-custom" data-toggle="modal" data-target="#editGroupProfileModal">Edit Group</button>
                    }
                    else if (groupView.GroupMemberships.Any(m => m.userId == currentUserInfoId && m.groupId == currentGroupId && m.status == 1))
                    {
                        <form action="@Url.Action("LeaveGroup", "Home")" method="post">
                            <input type="hidden" name="groupId" value="@currentGroupId" />
                            <button type="submit" class="btn btn-custom">Leave</button>
                        </form>
                    }
                    else if (groupView.GroupMemberships.Any(m => m.userId == currentUserInfoId && m.groupId == currentGroupId && m.status == 0))
                    {
                        <form id="cancelRequestForm" action="@Url.Action("CancelJoinRequest", "Home")" method="post">
                            <input type="hidden" name="groupId" value="@currentGroupId" />
                            <input type="hidden" name="returnUrl" value="@Request.Url.PathAndQuery" />
                            <button type="button" class="btn btn-custom" id="cancelRequestButton">Cancel Request</button>
                        </form>
                    }
                    else
                    {
                        <form action="@Url.Action("JoinGroup", "Home")" method="post">
                            <input type="hidden" name="groupId" value="@currentGroupId" />
                            <input type="hidden" name="returnUrl" value="@Request.Url.PathAndQuery" />
                            <button type="submit" class="btn btn-custom">Join Group</button>
                        </form>
                    }

                </div>
            </div>

                @if (Model.Group.status == 0)
                {
                    <div class="group-navigation" style="position:sticky; top:310px;">
                        <ul>
                            <li><a href="#" class="nav-link" data-target="contents">Contents</a></li>
                        </ul>
                    </div>
                }
                else if (Model.Group.status == 1)
                {
                    <div class="group-navigation" style="position:sticky; top:310px;">
                        <ul>
                            <li><a href="#" class="nav-link" data-target="contents">Contents</a></li>
                            <li><a href="#" class="nav-link" data-target="events">Events</a></li>
                            <li><a href="#" class="nav-link" data-target="forums">Forums</a></li>
                            @if (Model.Group.groupAdmin == currentUserId)
                {
                                <li><a href="#" class="nav-link" data-target="manage">Member Management</a></li>
                            }
                        </ul>
                    </div>
                }
        </div>
    </div>

    @if (Model.Group.status == 0)
    {

        <h3 style="margin-top:3%; padding-left:25%" >Waiting For Admin Approval. Please be Patient!</h3>
    }
    else if (Model.Group.status == 1)
    {

        <div class="tab-content">
            <div id="contents" class="tab-pane container pt--5" style="margin-top:3%;">
                <div class="row" style="flex-wrap:nowrap">
                    <div class="col-md-8">
                        @if (Model.Group.groupAdmin == currentUserId)
                        {
                            <div class="post col-md-20">
                                <div class="post-interact">
                                    <img src="@profileImage" alt="Avatar" class="user-icon" style="width: 45px; height: 45px; object-fit: cover">
                                    <input data-toggle="modal" data-target="#createPostModal" type="text" placeholder="Post Something" class="comment-input">
                                </div>
                                <div class="post-actions">
                                    <button data-toggle="modal" data-target="#createPostModal" class="action-button"><span class="input-icon-addon"><i class="fas fa-calendar"></i></span> Create Event</button>
                                    <button data-toggle="modal" data-target="#createPostModal" class="action-button"><span class="input-icon-addon"><i class="fas fa-video"></i></span> Photo/Video</button>
                                </div>
                            </div>
                        }

                        @foreach (var item in groupView.PostManage.Where(item => item.groupId == currentGroupId && item.status == 0))
                        {                           
                            var user = groupView.UserInformations.FirstOrDefault(u => u.userId == item.createdBy);
                            string profilePicture = user != null && user.Image != null && user.Image.Any()
                                                ? Url.Content("~/UploadedFiles/" + user.Image.FirstOrDefault()?.imageFile)
                                                : Url.Content("~/UploadedFiles/default.png"); // Fallback to default profile picture
                            string fullName = user != null ? $"{user.first_name} {user.last_name}" : "Unknown";                            
                            <div class="post col-md-20">

                                <div class="post-header">

                                    <img src="@profilePicture" alt="Group Icon" class="group-icon">
                                    <div class="group-info">

                                        <div class="group-name" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">
                                            @fullName
                                        </div>
                                        <div class="post-time" style="text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">Admin</div>
                                    </div>
                                    @if (currentUserId == Model.Group.groupAdmin)
                                    {
                                        <div class="post-options">
                                            <button class="options-button">...</button>
                                            <div class="options-menu">
                                                <form id="deletePostForm-@item.id" action="@Url.Action("DeletePost", "Home")" method="post" style="display:inline;">
                                                    <input type="hidden" name="id" value="@item.id" />
                                                    <input type="hidden" name="groupId" value="@item.groupId" />
                                                    <a class="btn deletePostButton" style="justify-content:left; display:flex" data-post-id="@item.id">
                                                      Delete Post
                                                    </a>
                                                </form>
                                            </div>
                                        </div>
                                    }

                                </div>
                                <div class="post-content">
                                    <p>@item.content</p>
                                </div>
                              @if (item.PostMedia != null && item.PostMedia.Any(m => m.mediaType.StartsWith("Image", StringComparison.OrdinalIgnoreCase)))
                              {
                                  var imageMedia = item.PostMedia.Where(m => m.mediaType.StartsWith("Image", StringComparison.OrdinalIgnoreCase)).ToList();
                                  var imageCount = imageMedia.Count;

                                  if (imageCount == 1)
                                  {
                                      // Single Image
                                      var singleImage = imageMedia.FirstOrDefault();
                                      if (singleImage != null)
                                      {
                                        <div class="post-media mt-2 single-image-container">
                                            <button type="button" class="btn btn-link p-0" data-toggle="modal" data-target="#imageModals"
                                                    data-images='["@Url.Content(singleImage.mediaFile)"]'
                                                    data-profile-picture="@Url.Content(profilePicture)"
                                                    data-user-name="@fullName"
                                                    data-post-title="@item.content">
                                                <img src="@Url.Content(singleImage.mediaFile)" alt="Post Image" class="img-fluid single-post-image" loading="lazy">
                                            </button>
                                        </div>
                                      }
                                  }
                                  else if (imageCount > 1)
                                  {
                                      // Multiple Images in Masonry Grid
                                      var imageUrls = imageMedia.Select(m => Url.Content(m.mediaFile)).ToList();
                                      var imageUrlsJson = JsonConvert.SerializeObject(imageUrls);

                                    <div class="post-media-wrapper">
                                        <div class="post-media masonry-grid">
                                            @for (var index = 0; index < imageUrls.Count; index++)
                                            {
                                                var imageUrl = imageUrls[index];
                                                <div class="masonry-item @(index == 4 && imageCount > 5 ? "overlay-item" : "")">
                                                    <button type="button" class="btn btn-link p-0" data-toggle="modal" data-target="#imageModals"
                                                            data-images='@Html.Raw(imageUrlsJson)'
                                                            data-profile-picture="@Url.Content(profilePicture)"
                                                            data-user-name="@fullName"
                                                            data-post-title="@item.content">
                                                        <img src="@imageUrl" alt="Post Image" class="img-fluid masonry-image" loading="lazy">
                                                        @if (index == 4 && imageCount > 5)
                                                        {
                                                            <div class="overlay">+@(imageCount - 5)</div>
                                                        }
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                  }
                              }
                            @if (item.PostMedia != null && item.PostMedia.Any(m => m.mediaType.StartsWith("Video", StringComparison.OrdinalIgnoreCase)))
                            {
                                var videoMedia = item.PostMedia.Where(m => m.mediaType.StartsWith("Video", StringComparison.OrdinalIgnoreCase)).ToList();

                                <div class="post-media mt-2">
                                    @foreach (var media in videoMedia)
                                    {
                                        <video controls class="img-fluid mb-2" style="max-width: 100%; height: auto;">
                                            <source src="@Url.Content(media.mediaFile)" type="video/mp4">
                                            Your browser does not support the video tag.
                                        </video>
                                    }
                                </div>
                            }
                                <span class="input-icon-addon like-count" style="color: #777; font-size: 15px;"><i class="fas fa-heart"></i>  @item.Reaction.Count(r => r.hasLiked == true)</span>

                                <div class="post-actions">
                                    <button class="action-button"
                                            onclick="toggleLike(this, @item.id)"
                                            data-isliked="@(item.Reaction.Any(r => r.userId == currentUserId && r.hasLiked) ? "true" : "false")">
                                        <span class="input-icon-addon">
                                            <i class="@(item.Reaction.Any(r => r.userId == currentUserId && r.hasLiked) ? "fas" : "far") fa-heart"></i>
                                        </span>
                                        @(item.Reaction.Any(r => r.userId == currentUserId && r.hasLiked) ? "Liked" : "Like")
                                    </button>                                    
                                    @if (groupView.GroupMemberships.Any(m => m.userId == currentUserInfoId && m.groupId == currentGroupId && m.status == 1))
                                    {
                                        <button class="action-button">
                                            <span class="input-icon-addon"><i class="fas fa-comment-alt"></i></span> Interact
                                        </button>
                                    }
                                        <button class="action-button"><span class="input-icon-addon"><i class="fas fa-retweet"></i></span> Repost</button>

                                </div>
                                <div id="comments-section-@item.id" class="post-comments">
                                    <div class="post-time" style="font-size:13px; font-weight:bold; padding:10px 0 10px 0">Interactions</div>
                                    @if (item.PostComments != null)
                                    {
                                        foreach (var com in item.PostComments)
                                        {
                                            string profileImages = Url.Content("~/UploadedFiles/default.png");

                                            var commentUserInfo = groupView.UserInformations.FirstOrDefault(u => u.userId == com.userId);
                                            var image = commentUserInfo.Image?.ToList();
                                            profileImages = string.IsNullOrEmpty(image?.FirstOrDefault()?.imageFile)
                                            ? Url.Content("~/UploadedFiles/default.png")
                                            : Url.Content("~/UploadedFiles/" + image.FirstOrDefault()?.imageFile);


                                            <div class="post-header">
                                                <img src="@profileImages" alt="User Avatar" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">

                                                <div class="group-info">
                                                    <div class="group-name" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">@(commentUserInfo != null ? commentUserInfo.first_name + " " + commentUserInfo.last_name : "Unknown User")</div>
                                                    <div class="post-content" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">@com.comment</div>
                                                </div>
                                            </div>
                                            <br />
                                        }

                                    }
                                    else
                                    {
                                        <p>No comments yet.</p>
                                    }
                                </div>
                                @if (groupView.GroupMemberships.Any(m => m.userId == currentUserInfoId && m.groupId == currentGroupId && m.status == 1))
                                {
                                    <form onsubmit="submitComment(this, @item.id)" style="display: inline;">
                                        <div class="post-interact">
                                            <input type="hidden" name="groupId" value="@item.groupId" />
                                            <input type="hidden" name="postId" value="@item.id" />
                                            <input type="hidden" name="userId" value="@currentUserId" />
                                            <input type="hidden" name="redirectPage" value="GroupDetail" />
                                            <img src="@profileImage" alt="Avatar" class="user-icon" style="width: 45px; height: 45px; object-fit: cover">
                                            <input type="text" name="comment" placeholder="Interact as @userName" class="comment-input">
                                            <button type="submit" class="action-button"><span class="input-icon-addon"><i class="fas fa-paper-plane"></i></span></button>
                                        </div>
                                    </form>
                                }

                            </div>
                                        }
                    </div>
                    <div class="col-lg-4">
                        <div class="events-container bg-white p-4 shadow-sm border-rad20" style="position:static; top:380px;">
                            <div class="event-buttons">
                                <button class="event-button active">Upcoming Events</button>
                            </div>
                            <div id="upcomingEvents">
                                    @foreach (var events in groupView.Events.Where(g => g.groupId == currentGroupId && g.status == 1 && g.event_date > DateTime.Now).OrderByDescending(g => g.event_date))
                                    {
                                        var goingCount = ViewBag.EventAttendanceCounts.ContainsKey(events.id) ? ViewBag.EventAttendanceCounts[events.id] : 0;

                                    <div class="event-item mb-3 p-3 bg-light rounded d-flex" data-date="2024-07-12">
                                        <div class="event-date me-3 text-center">
                                            <div class="event-day mb-1">@events.event_date.Value.ToString("MMM")</div>

                                            <div class="event-day mb-1">

                                                @(events.event_date.HasValue ? events.event_date.Value.ToString("dd") : "N/A")
                                            </div>
                                            <div class="event-time">@(events.event_date.HasValue ? events.event_date.Value.ToString("hh:mm tt") : "N/A")</div>
                                        </div>
                                        <div class="event-details">

                                            <div class="event-day-of-week mb-1">@events.event_date.Value.ToString("dddd")</div>
                                            <button class="action-button event-title mb-1"
                                                    data-toggle="modal"
                                                    data-target="#viewEventModal"
                                                    data-title="@events.title"
                                                    data-eventId="@events.id"
                                                    data-groupId="@events.groupId"
                                                    data-description="@events.description"
                                                    data-groupImage="@Url.Content("~/UploadedFiles/" + ViewBag.GroupImage)"
                                                    data-groupName="@groupname"
                                                    data-date="@events.event_date.Value.ToString("MMMM d, yyyy hh:mm tt")"
                                                    data-media='@Html.Raw(Json.Encode(events.EventMedia.Select(m => m.mediaFile)))'>
                                                @events.title
                                            </button>
                                            <div class="event-description">@events.description</div>
                                            <div class="event-description">
                                                <span class="badge badge-success" style="color:dimgrey">Going: @goingCount</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>                          
                        </div>
                    </div>
                </div>
            </div>


            @if (currentUserId == Model.Group.groupAdmin)
            {
                <div class="tab-pane container mt-3" id="events">
                    <div class="row">                        
                        <div class="col-md-6">
                            <div class="events-container bg-white p-4 shadow-sm border-rad20">
                                <div class="event-buttons">
                                    <button id="upcomingEventBtn" class="event-button active">Upcoming Events</button>
                                    <button id="recentEventsBtn" class="event-button">Recent Events</button>
                                    <button id="pendingEventsBtn" class="event-button">Pending Events</button>
                                    <button class="btn btn-dark" onclick="openPrintDialog()">
                                        <i class="fas fa-file-pdf"></i>
                                    </button>
                                </div>
                                <div id="upcomingEvent" class="d-none">
                                    @foreach (var events in groupView.Events.Where(g => g.groupId == currentGroupId && g.status == 1 && g.event_date > DateTime.Now).OrderByDescending(g => g.event_date))
                                    {
                                        var goingCount = ViewBag.EventAttendanceCounts.ContainsKey(events.id) ? ViewBag.EventAttendanceCounts[events.id] : 0;

                                        <div class="event-item mb-3 p-3 bg-light rounded d-flex" data-date="2024-07-12">
                                            <div class="event-date me-3 text-center">
                                                <div class="event-day mb-1" style="color:black;">
                                                    @events.event_date.Value.ToString("MMM")
                                                </div>
                                                <div class="event-day mb-1">
                                                    @(events.event_date.HasValue ? events.event_date.Value.ToString("dd") : "N/A")
                                                </div>
                                                <div class="event-time">@(events.event_date.HasValue ? events.event_date.Value.ToString("hh:mm tt") : "N/A")</div>

                                            </div>
                                            <div class="event-details">
                                                <div class="event-day-of-week mb-1">@events.event_date.Value.ToString("dddd")</div>
                                                <button class="action-button event-title mb-1"
                                                        data-toggle="modal"
                                                        data-target="#viewEventModal"
                                                        data-title="@events.title"
                                                        data-eventId="@events.id"
                                                        data-groupId="@events.groupId"
                                                        data-description="@events.description"
                                                        data-date="@events.event_date.Value.ToString("MMMM d, yyyy hh:mm tt")"
                                                        data-groupImage="@Url.Content("~/UploadedFiles/" + ViewBag.GroupImage)"
                                                        data-groupName="@groupname"
                                                        data-media='@Html.Raw(Json.Encode(events.EventMedia.Select(m => m.mediaFile)))'>
                                                    @events.title
                                                </button>
                                                <div class="event-description">@events.description</div>
                                                <div class="event-description">
                                                    <span class="badge badge-success" style="color:dimgrey">Going: @goingCount</span>
                                                </div>
                                            </div>
                                            <form id="deleteEventForm-@events.id" action="@Url.Action("DeleteEvent", "Home")" method="post" style="display:inline;">
                                                <input type="hidden" name="id" value="@events.id" />
                                                <input type="hidden" name="groupId" value="@events.groupId" />
                                                <button type="button" class="btn btn-danger btn-sm deleteEventButton" data-event-id="@events.id">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </form>
                                        </div>
                                    }
                                </div>
                                <div id="recentEvent" class="d-none">
                                        @foreach (var events in groupView.Events.Where(g => g.groupId == currentGroupId && g.status == 1 && DateTime.Now > g.event_date).OrderByDescending(g => g.event_date))
                                        {
                                            var goingCount = ViewBag.EventAttendanceCounts.ContainsKey(events.id) ? ViewBag.EventAttendanceCounts[events.id] : 0;

                                            <div class="event-item mb-3 p-3 bg-light rounded d-flex" data-date="2024-07-12">
                                                <div class="event-date me-3 text-center">
                                                    <div class="event-day mb-1" style="color:black;">
                                                        @events.event_date.Value.ToString("MMM")
                                                    </div>
                                                    <div class="event-day mb-1">
                                                        @(events.event_date.HasValue ? events.event_date.Value.ToString("dd") : "N/A")
                                                    </div>
                                                    <div class="event-time">@(events.event_date.HasValue ? events.event_date.Value.ToString("hh:mm tt") : "N/A")</div>

                                                </div>
                                                <div class="event-details">
                                                    <div class="event-day-of-week mb-1">@events.event_date.Value.ToString("dddd")</div>
                                                    <button class="action-button event-title mb-1"
                                                            data-toggle="modal"
                                                            data-target="#viewEventModal"
                                                            data-title="@events.title"
                                                            data-eventId="@events.id"
                                                            data-groupId="@events.groupId"
                                                            data-description="@events.description"
                                                            data-date="@events.event_date.Value.ToString("MMMM d, yyyy hh:mm tt")"
                                                            data-groupImage="@Url.Content("~/UploadedFiles/" + ViewBag.GroupImage)"
                                                            data-groupName="@groupname"
                                                            data-media='@Html.Raw(Json.Encode(events.EventMedia.Select(m => m.mediaFile)))'>
                                                        @events.title
                                                    </button>
                                                    <div class="event-description">@events.description</div>
                                                    <div class="event-description">
                                                        <span class="badge badge-success" style="color:dimgrey">Going: @goingCount</span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                </div>
                                <div id="pendingEvents" class="d-none">
                                    @foreach (var events in groupView.Events.Where(g => g.groupId == currentGroupId && g.status == 0).OrderByDescending(g => g.event_date))
                                    {
                                        <div class="event-item mb-3 p-3 bg-light rounded d-flex" data-date="2024-07-12">
                                            <div class="event-date me-3 text-center">
                                                <div class="event-day mb-1" style="color:black;">
                                                    @events.event_date.Value.ToString("MMM")
                                                </div>
                                                <div class="event-day mb-1">
                                                    @(events.event_date.HasValue ? events.event_date.Value.ToString("dd") : "N/A")
                                                </div>
                                                <div class="event-time">@(events.event_date.HasValue ? events.event_date.Value.ToString("hh:mm tt") : "N/A")</div>

                                            </div>
                                            <div class="event-details">
                                                <div class="event-day-of-week mb-1">@events.event_date.Value.ToString("dddd")</div>
                                                <button class="action-button event-title mb-1"
                                                        data-toggle="modal"
                                                        data-target="#viewEventModal"
                                                        data-title="@events.title"
                                                        data-eventId="@events.id"
                                                        data-groupId="@events.groupId"
                                                        data-description="@events.description"
                                                        data-date="@events.event_date.Value.ToString("MMMM d, yyyy hh:mm tt")"
                                                        data-groupImage="@Url.Content("~/UploadedFiles/" + ViewBag.GroupImage)"
                                                        data-groupName="@groupname"
                                                        data-media='@Html.Raw(Json.Encode(events.EventMedia.Select(m => m.mediaFile)))'>
                                                    @events.title
                                                </button>
                                                <div class="event-description">@events.description</div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="calendar-container bg-white p-4 shadow-sm border-rad20" style="text-align:left">
                                <h5>Create Event</h5>
                                <!--event time still not functional and invite all group members-->
                                <form action="@Url.Action("CreateEvent", "Home")" method="post" enctype="multipart/form-data" style="display: inline;">

                                    <input type="hidden" name="groupId" value="@currentGroupId" />
                                    <input type="hidden" name="userId" value="@currentUserId" />

                                    <div class="form-group text-center">
                                        <label for="CoverPhoto">Cover Photo</label>
                                        <input type="file" name="mediaFiles" id="coverPhoto" accept="image/*" class="form-control" onchange="previewImage(event, 'coverPhotoPreviewContainer')">
                                        <div id="coverPhotoPreviewContainer" class="image-preview-container mt-2 rectangular-container">
                                            <img id="coverPhotoPreview" src="#" alt="Cover Photo Preview" class="img-fluid preview-image" style="display: none;">
                                        </div>
                                    </div>                                 
                                    <div class="form-group mt-3">
                                        <label>Event Name</label>
                                        <input type="text" name="title" class="form-control" placeholder="Event / Meeting Name" required>
                                    </div>
                                    <div class="form-group mt-3">
                                        <label>Start Date</label>
                                        <input type="date" id="event_date_tab1" name="event_date" class="form-control" required min="@DateTime.Now.ToString("yyyy-MM-dd")">
                                    </div>
                                    <div class="form-group mt-3">
                                        <label for="event_time_tab1">Start Time</label>
                                        <div class="dropdown custom-dropdown d-flex">
                                            <div class="dropdown-menu-container flex-grow-1">
                                                <button style="border:1px solid #ced4da;" class="btn dropdown-toggle w-100" type="button" id="timeDropdownButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                    Select Time
                                                </button>
                                                <ul class="dropdown-menu w-100" id="timeDropdown">
                                                    <div id="timeList"></div>
                                                </ul>
                                            </div>
                                            <div class="am-pm-switch d-flex flex-column">
                                                <button type="button" id="amButton" class="toggle-button active">AM</button>
                                                <button type="button" id="pmButton" class="toggle-button">PM</button>
                                            </div>
                                        </div>
                                        <input type="hidden" id="event_time_hidden" name="event_time">
                                    </div>
                                    <div class="form-group mt-3">
                                        <textarea class="form-control" name="description" placeholder="Event / Meeting Details"></textarea>
                                    </div>
                                    <br />
                                    <button type="submit" class="btn btn-custom">Create Event</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (currentUserId != Model.Group.groupAdmin)
            {
                <div class="tab-pane container mt-3" id="events">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="calendar-container bg-white p-4 shadow-sm border-rad20">
                                <div class="d-flex justify-content-between align-items-center">
                                    <button class="btn btn-light border-rad10" id="userPrevMonth">&lt;</button>
                                    <h4 id="userCurrentMonth" class="mb-0"></h4>
                                    <button class="btn btn-light border-rad10" id="userNextMonth">&gt;</button>
                                </div>
                                <table class="table table-borderless mt-3">
                                    <thead>
                                        <tr>
                                            <th>Sun</th>
                                            <th>Mon</th>
                                            <th>Tue</th>
                                            <th>Wed</th>
                                            <th>Thu</th>
                                            <th>Fri</th>
                                            <th>Sat</th>
                                        </tr>
                                    </thead>
                                    <tbody id="userCalendarBody">
                                        <!-- Calendar days will be dynamically populated here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="events-container bg-white p-4 shadow-sm border-rad20">
                                <div class="event-buttons">
                                    <button id="userUpcomingEventBtn" class="event-button active">Upcoming Events</button>
                                    <button id="userRecentEventsBtn" class="event-button">Recent Events</button>
                                </div>

                                <!-- Upcoming Events Section -->
                                <div id="userUpcomingEvent">
                                    @foreach (var events in groupView.Events.Where(g => g.groupId == currentGroupId && g.status == 1 && g.event_date > DateTime.Now).OrderByDescending(g => g.event_date))
                                    {
                                        var goingCount = ViewBag.EventAttendanceCounts.ContainsKey(events.id) ? ViewBag.EventAttendanceCounts[events.id] : 0;

                                        <div class="event-item mb-3 p-3 bg-light rounded d-flex" data-date="@events.event_date.Value.ToString("yyyy-MM-dd")">
                                            <div class="event-date me-3 text-center">
                                                <div class="event-day mb-1">@events.event_date.Value.ToString("MMM")</div>
                                                <div class="event-day mb-1">@events.event_date.Value.ToString("dd")</div>
                                                <div class="event-time">@events.event_date.Value.ToString("hh:mm tt")</div>
                                            </div>
                                            <div class="event-details">
                                                <div class="event-day-of-week mb-1">@events.event_date.Value.ToString("dddd")</div>
                                                <button class="action-button event-title mb-1"
                                                        data-toggle="modal"
                                                        data-target="#viewEventModal"
                                                        data-title="@events.title"
                                                        data-eventId="@events.id"
                                                        data-groupId="@events.groupId"
                                                        data-description="@events.description"
                                                        data-date="@events.event_date.Value.ToString("MMMM d, yyyy hh:mm tt")"
                                                        data-groupImage="@Url.Content("~/UploadedFiles/" + ViewBag.GroupImage)"
                                                        data-groupName="@groupname"
                                                        data-media='@Html.Raw(Json.Encode(events.EventMedia.Select(m => m.mediaFile)))'>
                                                    @events.title
                                                </button>

                                                <div class="event-description">@events.description</div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <!-- Recent Events Section -->
                                <div id="userRecentEvent" class="d-none">
                                    @foreach (var events in groupView.Events.Where(g => g.groupId == currentGroupId && g.status == 1 && g.event_date < DateTime.Now).OrderByDescending(g => g.event_date))
                                    {
                                        var goingCount = ViewBag.EventAttendanceCounts.ContainsKey(events.id) ? ViewBag.EventAttendanceCounts[events.id] : 0;

                                        <div class="event-item mb-3 p-3 bg-light rounded d-flex" data-date="2024-07-12">
                                            <div class="event-date me-3 text-center">
                                                <div class="event-day mb-1">@events.event_date.Value.ToString("MMM")</div>
                                                <div class="event-day mb-1">@events.event_date.Value.ToString("dd")</div>
                                                <div class="event-time">@events.event_date.Value.ToString("hh:mm tt")</div>
                                            </div>
                                            <div class="event-details">
                                                <div class="event-day-of-week mb-1">@events.event_date.Value.ToString("dddd")</div>
                                                <button class="action-button event-title mb-1"
                                                        data-toggle="modal"
                                                        data-target="#viewEventModal"
                                                        data-title="@events.title"
                                                        data-eventId="@events.id"
                                                        data-groupId="@events.groupId"
                                                        data-description="@events.description"
                                                        data-date="@events.event_date.Value.ToString("MMMM d, yyyy hh:mm tt")"
                                                        data-groupImage="@Url.Content("~/UploadedFiles/" + ViewBag.GroupImage)"
                                                        data-groupName="@groupname"
                                                        data-media='@Html.Raw(Json.Encode(events.EventMedia.Select(m => m.mediaFile)))'>
                                                    @events.title
                                                </button>
                                                <div class="event-description">@events.description</div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                        </div>                       
                    </div>
                </div>
            }
            <div id="forums" class="tab-pane container pt--5" style="margin-top:3%;">
                <div class="row" style="flex-wrap:nowrap">
                    <div class="col-md-12">

                        <div class="post col-md-20">
                            <div class="post-interact">
                                <img src="@profileImage" alt="Avatar" class="user-icon" style="width: 45px; height: 45px; object-fit: cover">
                                <input data-toggle="modal" data-target="#createForumModal" type="text" placeholder="Post Something" class="comment-input">
                            </div>                          
                        </div>


                        @foreach (var item in groupView.ForumManage.Where(item => item.groupId == currentGroupId && item.status == 0))
                        {
                            <div class="post col-md-20">

                                <div class="post-header">
                                    @{
                                        var user = groupView.UserInformations.FirstOrDefault(u => u.userId == item.createdBy);
                                        string profilePicture = user != null && user.Image != null && user.Image.Any()
                                                            ? Url.Content("~/UploadedFiles/" + user.Image.FirstOrDefault()?.imageFile)
                                                            : Url.Content("~/UploadedFiles/default.png"); // Fallback to default profile picture
                                        string fullName = user != null ? $"{user.first_name} {user.last_name}" : "Unknown";
                                    }
                                    <img src="@profilePicture" alt="Group Icon" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">
                                    <div class="group-info">

                                        <div class="group-name" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">
                                            @fullName
                                        </div>
                                        @if (item.createdBy == Model.Group.groupAdmin)
                                        {
                                            <div class="post-time" style="text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">Admin</div>

                                        }
                                        else
                                        {
                                            <div class="post-time" style="text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">Member</div>

                                        }
                                    </div>
                                    <div class="post-options">
                                        <button class="options-button">...</button>
                                        <div class="options-menu">
                                            <a href="#">Hide Post</a>
                                            <a href="#">Save post</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="post-content">
                                    <p>@item.content</p>
                                </div>
                                <div class="post-actions">
                                    <button class="action-button" onclick="toggleLike(this)"><span class="input-icon-addon"><i class="far fa-heart"></i></span> Like</button>
                                    <button class="action-button" onclick="focusCommentInput(@item.id)">
                                        <span class="input-icon-addon"><i class="fas fa-comment-alt"></i></span> Interact
                                    </button>                               
                                </div>
                                <div id="forumcomments-section-@item.id" class="post-comments">
                                    <div class="post-time" style="font-size:13px; font-weight:bold; padding:10px 0 10px 0">Interactions</div>
                                    @if (item.ForumComments != null)
                                    {
                                        foreach (var com in item.ForumComments)
                                        {
                                            string profileImages = Url.Content("~/UploadedFiles/default.png");

                                            var commentUserInfo = groupView.UserInformations.FirstOrDefault(u => u.userId == com.userId);
                                            var image = commentUserInfo.Image?.ToList();
                                            profileImages = string.IsNullOrEmpty(image?.FirstOrDefault()?.imageFile)
                                            ? Url.Content("~/UploadedFiles/default.png")
                                            : Url.Content("~/UploadedFiles/" + image.FirstOrDefault()?.imageFile);


                                            <div class="post-header">
                                                <img src="@profileImages" alt="User Avatar" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">

                                                <div class="group-info">
                                                    <div class="group-name" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">@(commentUserInfo != null ? commentUserInfo.first_name + " " + commentUserInfo.last_name : "Unknown User")</div>
                                                    <div class="post-content" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">@com.comment</div>
                                                </div>
                                            </div>
                                            <br />
                                        }

                                    }
                                    else
                                    {
                                        <p>No comments yet.</p>
                                    }
                                </div>
                                <div class="post-comments">
                                    <form onsubmit="submitForumComment(this, @item.id)" style="display: inline;">
                                        <div class="post-interact">
                                            <input type="hidden" name="groupId" value="@item.groupId" />
                                            <input type="hidden" name="forumId" value="@item.id" />
                                            <input type="hidden" name="userId" value="@currentUserId" />
                                            <input type="hidden" name="redirectPage" value="GroupDetail" />
                                            <img src="@profileImage" alt="Avatar" class="user-icon" style="width: 45px; height: 45px; object-fit: cover">
                                            <input id="comment-input-@item.id" type="text" name="comment" placeholder="Interact as @userName" class="comment-input">
                                            <button type="submit" class="action-button"><span class="input-icon-addon"><i class="fas fa-paper-plane"></i></span></button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                                        }
                    </div>
                </div>
            </div>

            @if (currentUserId == Model.Group.groupAdmin)
            {
                <div id="manage" class="tab-pane">
                    <h2>Manage Group</h2>
                    <p>Group Management.</p>
                    <div class="row">
                        <!-- Content Approval List -->
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <div class="card-title">Pending Members</div>
                                </div>
                                <div class="card-body">
                                    <table id="contentApprovalTable" class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Date Requested</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in groupView.GrpMembership.Where(item => item.groupId == currentGroupId && item.status == 0))
                                            {
                                                <tr>
                                                    <td>
                                                        @{
                                                            var user = groupView.UserInformations.FirstOrDefault(u => u.id == item.userId);
                                                            string fullName = user != null ? $"{user.first_name} {user.last_name}" : "Unknown";
                                                        }
                                                        @fullName
                                                    </td>
                                                    <td>@(((DateTime)item.dateJoined).ToString("yyyy-MM-dd HH:mm"))</td>
                                                    <td><span class="badge badge-warning" style="color:orange">Pending</span></td>
                                                    <td>
                                                        <form action="@Url.Action("UpdateMembershipStatus", "Home")" method="post" style="display: inline;">
                                                            <input type="hidden" name="groupId" value="@item.groupId" />
                                                            <input type="hidden" name="userId" value="@item.userId" />
                                                            <input type="hidden" name="id" value="@item.id" />
                                                            <input type="hidden" name="status" value="1" />
                                                            <button type="submit" class="btn btn-success btn-sm">
                                                                <i class="fas fa-check"></i> Approve
                                                            </button>
                                                        </form>

                                                        <form action="@Url.Action("UpdateMembershipStatus", "Home")" method="post" style="display: inline;">
                                                            <input type="hidden" name="groupId" value="@item.groupId" />
                                                            <input type="hidden" name="userId" value="@item.userId" />
                                                            <input type="hidden" name="id" value="@item.id" />
                                                            <input type="hidden" name="status" value="2" />
                                                            <button type="submit" class="btn btn-danger btn-sm">
                                                                <i class="fas fa-times"></i> Reject
                                                            </button>
                                                        </form>
                                                    </td>
                                                </tr>
                                                            }

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <!-- Content Approval List -->
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <div class="card-title">Group Members</div>
                                </div>
                                <div class="card-body">
                                    <table id="contentApprovalTable" class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Date Requested</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in groupView.GrpMembership.Where(item => item.groupId == currentGroupId && item.status == 1))
                                            {
                                                var user = groupView.UserInformations.FirstOrDefault(u => u.id == item.userId);
                                                if (user != null && user.userId != Model.Group.groupAdmin)
                                                {
                                                    string fullName = $"{user.first_name} {user.last_name}";

                                                    <tr>
                                                        <td>@fullName</td>
                                                        <td>@(((DateTime)item.dateJoined).ToString("yyyy-MM-dd HH:mm"))</td>
                                                        <td><span class="badge badge-success" style="color:darkseagreen">Member</span></td>
                                                        <td>
                                                            <form action="@Url.Action("RemoveMember", "Home")" method="post" style="display: inline;">
                                                                <input type="hidden" name="groupId" value="@item.groupId" />
                                                                <input type="hidden" name="userId" value="@item.userId" />
                                                                <input type="hidden" name="id" value="@item.id" />
                                                                <input type="hidden" name="status" value="0" />
                                                                <button type="submit" class="btn btn-danger btn-sm">
                                                                    <i class="fas fa-times"></i> Remove From Group
                                                                </button>
                                                            </form>
                                                        </td>
                                                    </tr>
                                                }
                                            }

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                                                            }
        </div>
                                                            }
</div>

<div class="modal fade" id="createPostModal" tabindex="-1" role="dialog" aria-labelledby="createPostModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @using (Html.BeginForm("Post", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="modal-header">
                    <h5 class="modal-title" id="createPostModalLabel">Create Post</h5>
                    <button type="button" class="modal-close-btn" data-dismiss="modal" aria-label="Close" style="border:0px; background-color:#00000000">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="post-header d-flex align-items-center mb-3">
                        <img src="@profileImage" alt="Avatar" class="user-icon rounded-circle" style="width: 45px; height: 45px; object-fit: cover; margin-right: 10px;">
                        <div>
                            <span class="group-name font-weight-bold" style="margin-right:500px;">@User.Identity.Name</span>
                        </div>
                    </div>

                    <div class="form-group">
                        <textarea name="content" placeholder="Post Something" class="form-control" style="height: 150px; resize: none;"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="tags">Tags (comma-separated):</label>
                        <input name="tags" type="text" placeholder="e.g., faith, prayer, inspiration" class="form-control">
                    </div>
                    <div class="form-group mt-3">
                        <label for="media">Add Media (Images/Videos):</label>
                        <input type="file" name="mediaFiles" id="mediaFiles" multiple accept="image/*,video/*" class="form-control-file">
                        <small class="form-text text-muted">You can upload multiple files. Allowed types: JPG, PNG, GIF, MP4, AVI.</small>
                        <!-- Preview Container -->
                        <div id="mediaPreview" class="d-flex flex-wrap mt-3"></div>
                    </div>
                    <input type="hidden" name="groupId" value="@currentGroupId" />
                    <input type="hidden" name="createdBy" value="@currentUserId" />
                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn w-100" value="Post" style="background:rgb(207 185 159); border-color:transparent; color:white;">
                </div>
            }
        </div>
    </div>
</div>



    <div class="modal fade" id="createForumModal" tabindex="-1" role="dialog" aria-labelledby="createForumModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @using (Html.BeginForm("Forum", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                    <div class="modal-header">
                        <h5 class="modal-title" id="createForumModal">Create Post</h5>
                        <button type="button" class="modal-close-btn" data-dismiss="modal" aria-label="Close" style="border:0px; background-color:#00000000">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">


                        <div class="post-header">
                            <img src="@profileImage" alt="Avatar" class="user-icon" style="width: 45px; height: 45px; object-fit: cover">
                            <div class="group-info">
                                <div class="group-name" style="color:black; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">@User.Identity.Name</div>
                            </div>
                        </div>
                        <div class="post-content">
                            <input name="content" type="text" placeholder="Start Discussion" style="padding:10px 10px 50% 10px; width:100%; border:0px; border-radius:10px;">
                        </div>
                        <input type="hidden" name="groupId" value="@currentGroupId" />
                        <input type="hidden" name="createdBy" value="@currentUserId" />
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn" value="Post" style="background-color:#cdbb9c; width:100%;" />
                    </div>
                }

            </div>
        </div>
    </div>
    
<div class="modal fade" id="viewEventModal" tabindex="-1" role="dialog" aria-labelledby="viewEventModalLabel" aria-hidden="true" data-backdrop="true" data-keyboard="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @using (Html.BeginForm("MarkAsGoing", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="modal-header">
                    <h5 class="modal-title" id="viewEventModalTitle">Event Information</h5>
                    <button type="button" class="modal-close-btn" data-dismiss="modal" onclick="forceModalClose()" aria-label="Close" style="border:0px; background-color:#00000000">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">

                    <div class="mb-3">
                        <img id="groupImage" src="#" alt="Group Image" class="rounded-circle" style="width: 80px; height: 80px; object-fit: cover;">
                        <h5 id="groupName" class="mt-2"></h5>
                    </div>

                    <h5 id="eventTitle"></h5>
                    <p id="eventDate"></p>
                    <p id="eventDescription"></p>
                    <div class="event-attendance mt-2">
                        <span class="badge badge-success" style="color:black">Going: <span id="eventGoingCount">0</span></span>
                    </div>

                    <input type="hidden" name="eventId" id="eventIdInput" />
                    <input type="hidden" name="groupId" id="groupIdInput" />

                    <div id="eventMediaContainer" class="mt-3">
                        <!-- Media content will be loaded dynamically here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" id="confirmGoingButton" style="background-color:#cdbb9c; width:20%;">Going</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="forceModalClose()">Close</button>
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="editGroupProfileModal" tabindex="-1" role="dialog" aria-labelledby="editGroupProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @using (Html.BeginForm("ChangeGroupPhoto", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="modal-header">
                    <h5 class="modal-title" id="editGroupProfileModalLabel">Edit Profile</h5>
                    <button type="button" class="modal-close-btn" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                    <div class="modal-body">
                        <input type="hidden" name="groupId" value="@currentGroupId" />
                       
                        <div class="form-group text-center">
                            <label for="coverPhoto">Cover Photo</label>
                            <input type="file" name="coverPhoto" id="coverPhoto" accept="image/*" class="form-control" onchange="previewImage(event, 'coverPhotoPreviewContainer')">
                            <div id="coverPhotoPreviewContainer" class="image-preview-container mt-2 rectangular-container">
                                <img id="coverPhotoPreview" src="#" alt="Cover Photo Preview" class="img-fluid preview-image" style="display: none;">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="firstname">Group Name</label>
                            <input type="text" name="groupName" class="form-control" value="@groupView.Group.groupName" required />
                            @Html.ValidationMessageFor(model => groupView.Group.groupName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="lastname">Group Description</label>
                            <textarea name="description" class="form-control" required>@groupView.Group.description</textarea>
                            @Html.ValidationMessageFor(model => groupView.Group.description, "", new { @class = "text-danger" })
                        </div>                 
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <input type="submit" class="btn btn-success" value="Save Changes" style="background-color:saddlebrown" />
                    </div>
            }

        </div>
    </div>
</div>



<div class="modal fade" id="imageModals" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <button type="button" class="modal-close-btn" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            <div class="modal-header align-items-center border-0 d-flex">
                <img id="modalProfilePicture" src="" alt="Profile Picture" class="rounded-circle profile-picture">
                <div class="ml-3 profile-details">
                    <h5 id="modalUserName" class="mb-0"></h5>
                    <p id="modalPostTitle"></p>
                </div>
            </div>

            <div class="modal-body p-0">
                <!-- Bootstrap Carousel -->
                <div id="carouselExample" class="carousel slide" data-ride="carousel">
                    <div class="carousel-inner" id="carouselImages">
                        <!-- Dynamically populated images will go here -->
                    </div>
                    <a class="carousel-control-prev" href="#carouselExample" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#carouselExample" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>
            <div class="modal-footer p-2">
                <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJTY5KVphtPhzWj9WO1clHTMGaEkaGQ2J95JCzy/8p3ylzTEi" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-pjaaA8dDz/UmAGHEmpNMI0HHLmV7xI5a2zVzt95Z5CjoFQ7p1rR/YL2cw6K9/6Nf" crossorigin="anonymous"></script>
<script src="~/Assets/Groups/js/groupdetail.js"></script>
<script src="~/Assets/signup/js/preview.js"></script>
<script src="~/Assets/Admin/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>
<script src="~/Assets/Admin/js/plugin/sticky-sidebar/sticky-sidebar.min.js"></script>
<script src="~/Assets/Admin/js/kaiadmin.min.js"></script>
<script src="~/Assets/Admin/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>
<script src="~/Assets/Admin/js/plugin/bootstrap-toggle/bootstrap-toggle.min.js"></script>
<script src="~/Assets/Admin/js/plugin/list.js/list.min.js"></script>
<script src="~/Assets/Admin/js/plugin/chart.js/chart.min.js"></script>
<script src="~/Assets/Admin/js/plugin/datatables/datatables.min.js"></script>
<script src="~/Assets/Admin/js/plugin/bootstrap-tagsinput/bootstrap-tagsinput.min.js"></script>
<script src="~/Assets/Admin/js/plugin/datepicker/bootstrap-datetimepicker.min.js"></script>
<script src="~/Assets/Admin/js/plugin/jquery.validate/jquery.validate.min.js"></script>
<script src="~/Assets/Admin/js/plugin/moment/moment.min.js"></script>
<script src="~/Assets/Admin/js/plugin/select2/select2.full.min.js"></script>
<script src="~/Assets/Admin/js/plugin/sortable/sortable.min.js"></script>
<script src="~/Assets/Admin/js/plugin/sweetalert/sweetalert.min.js"></script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const confirmGoingButton = document.getElementById('confirmGoingButton');

        if (confirmGoingButton) {
            confirmGoingButton.addEventListener('click', function () {
                Swal.fire({
                    title: "Confirm Attendance",
                    text: "Are you sure you want to mark yourself as 'Going' for this event?",
                    icon: "question",
                    showCancelButton: true,
                    confirmButtonText: "Yes, I'm Going",
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Check attendance via AJAX
                        fetch('@Url.Action("CheckIfGoing", "Home")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            body: JSON.stringify({ eventId: document.getElementById('eventIdInput').value })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.isGoing) {
                                Swal.fire({
                                    title: "Already Going",
                                    text: "You have already marked yourself as 'Going' for this event.",
                                    icon: "warning"
                                });
                            } else {
                                Swal.fire({
                                    title: "Marked as Going!",
                                    text: "You have marked yourself as 'Going' for this event.",
                                    icon: "success",
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    const form = confirmGoingButton.closest('form');
                                    if (form) {
                                        form.submit();
                                    }
                                });
                            }
                        });
                    }
                });
            });
        }
    });
</script>




<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('[data-toggle="modal"]').forEach(button => {
            button.addEventListener('click', function () {
                // Get image array for carousel
                const images = JSON.parse(this.getAttribute('data-images') || '[]');
                const carouselInner = document.getElementById('carouselImages');
                carouselInner.innerHTML = ''; // Clear previous content

                // Populate Carousel
                if (images.length > 0) {
                    images.forEach((src, index) => {
                        const isActive = index === 0 ? 'active' : '';
                        carouselInner.innerHTML += `
                            <div class="carousel-item ${isActive}">
                                <img src="${src}" class="d-block w-100" alt="Post Image">
                            </div>
                        `;
                    });

                    // Show/Hide Arrows based on image count
                    const prevArrow = document.querySelector('.carousel-control-prev');
                    const nextArrow = document.querySelector('.carousel-control-next');

                    if (images.length === 1) {
                        prevArrow.style.display = 'none';
                        nextArrow.style.display = 'none';
                    } else {
                        prevArrow.style.display = 'flex';
                        nextArrow.style.display = 'flex';
                    }
                }

                // Populate Profile Details
                const profilePicture = this.getAttribute('data-profile-picture');
                const userName = this.getAttribute('data-user-name');
                const postTitle = this.getAttribute('data-post-title');

                document.getElementById('modalProfilePicture').src = profilePicture || 'https://via.placeholder.com/50';
                document.getElementById('modalUserName').innerText = userName || 'Unknown User';
                document.getElementById('modalPostTitle').innerText = postTitle || '';

                // Reset carousel to the first slide
                $('#carouselExample').carousel(0);
            });
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('.event-title').forEach(button => {
            button.addEventListener('click', function () {
                const eventId = this.getAttribute('data-eventId');
                const title = this.getAttribute('data-title');
                const description = this.getAttribute('data-description');
                const date = this.getAttribute('data-date');
                const groupId = this.getAttribute('data-groupId');
                const groupImage = this.getAttribute('data-groupImage');
                const groupName = this.getAttribute('data-groupName');
                const mediaFiles = JSON.parse(this.getAttribute('data-media') || '[]');

                // Populate modal fields
                document.getElementById('eventTitle').textContent = title;
                document.getElementById('eventDescription').textContent = description;
                document.getElementById('eventDate').textContent = date;
                document.getElementById('eventIdInput').value = eventId;
                document.getElementById('groupIdInput').value = groupId;
                document.getElementById('groupImage').src = groupImage || '/UploadedFiles/default-cover.png';
                document.getElementById('groupName').textContent = groupName || 'Unknown Group';

                // Fetch updated attendance count via AJAX
                fetch(`/Home/GetEventAttendanceCount?eventId=${eventId}`)
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('eventGoingCount').textContent = data.count || '0';
                    })
                    .catch(error => {
                        console.error('Error fetching attendance count:', error);
                        document.getElementById('eventGoingCount').textContent = '0';
                    });

                // Populate media files
                const mediaContainer = document.getElementById('eventMediaContainer');
                mediaContainer.innerHTML = '';

                if (mediaFiles.length > 0) {
                    const imageUrl = mediaFiles[0];
                    mediaContainer.innerHTML = `
                    <img src="${imageUrl}" class="img-fluid rounded" alt="Event Media" style="max-height: 300px; object-fit: cover;">
                `;
                } else {
                    mediaContainer.innerHTML = '<p class="text-muted">No media available for this event.</p>';
                }

                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('viewEventModal'));
                modal.show();
            });
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const currentMonthEl = document.getElementById('userCurrentMonth');
        const prevMonthBtn = document.getElementById('userPrevMonth');
        const nextMonthBtn = document.getElementById('userNextMonth');
        const calendarBody = document.getElementById('userCalendarBody');
        const modal = document.getElementById('eventModal');
        const modalTitle = document.getElementById('eventTitle');
        const modalDate = document.getElementById('eventDate');
        const modalTime = document.getElementById('eventTime');
        const modalDescription = document.getElementById('eventDescription');
        const closeModal = document.getElementById('closeModal');

        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();

        // Fetch events from the HTML
        const eventItems = Array.from(document.querySelectorAll('.event-item'));
        const eventDetails = eventItems.map(item => ({
            date: new Date(item.getAttribute('data-date')),
            title: item.querySelector('.event-title').textContent,
            description: item.querySelector('.event-description').textContent,
            time: item.querySelector('.event-time').textContent || 'N/A'
            }));

        function renderCalendar() {
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            const firstDay = new Date(currentYear, currentMonth, 1).getDay();

            calendarBody.innerHTML = '';
            let date = 1;

            for (let i = 0; i < 6; i++) {
                const row = document.createElement('tr');
                for (let j = 0; j < 7; j++) {
                    const cell = document.createElement('td');
                    if (i === 0 && j < firstDay) {
                        cell.innerHTML = '';
                    } else if (date > daysInMonth) {
                        break;
                    } else {
                        const span = document.createElement('span');
                        span.textContent = date;
                        cell.appendChild(span);

                        const cellDate = new Date(currentYear, currentMonth, date);
                        const event = eventDetails.find(event =>
                            event.date.getDate() === date &&
                            event.date.getMonth() === currentMonth &&
                            event.date.getFullYear() === currentYear
                        );

                        if (event) {
                            cell.classList.add('event-day');
                            cell.setAttribute('data-title', event.title);
                            cell.setAttribute('data-description', event.description);
                            cell.addEventListener('click', function () {
                                evmodal.style.display = 'block';
                                evTitle.textContent = event.title;
                                evDate.textContent = `Date: ${event.date.toLocaleDateString()}`;
                                evTime.textContent = `Time: ${event.time}`;
                                evDescription.textContent = event.description;
                            });
                        }
                        cell.appendChild(span);
                        date++;
                    }
                    row.appendChild(cell);
                }
                calendarBody.appendChild(row);
            }

            currentMonthEl.textContent = new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' });
        }

        // Event listeners for navigation
        prevMonthBtn.addEventListener('click', function () {
            currentMonth = currentMonth === 0 ? 11 : currentMonth - 1;
            currentYear = currentMonth === 11 ? currentYear - 1 : currentYear;
            renderCalendar();
        });

        nextMonthBtn.addEventListener('click', function () {
            currentMonth = currentMonth === 11 ? 0 : currentMonth + 1;
            currentYear = currentMonth === 0 ? currentYear + 1 : currentYear;
            renderCalendar();
        });

        closeModal.addEventListener('click', function () {
            evmodal.style.display = 'none';
        });

        window.addEventListener('click', function (event) {
            if (event.target === evmodal) {
                evmodal.style.display = 'none';
            }
        });

        renderCalendar();
    });
    
</script>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Button and event containers for non-admin view
        const userUpcomingEventBtn = document.getElementById('userUpcomingEventBtn');
        const userRecentEventsBtn = document.getElementById('userRecentEventsBtn');
        const userUpcomingEvent = document.getElementById('userUpcomingEvent');
        const userRecentEvent = document.getElementById('userRecentEvent');

        // Reset active states for non-admin buttons
        function resetUserActiveStates() {
            userUpcomingEventBtn.classList.remove('active');
            userRecentEventsBtn.classList.remove('active');
            userUpcomingEvent.classList.add('d-none');
            userRecentEvent.classList.add('d-none');
        }

        // Show Upcoming Events
        userUpcomingEventBtn.addEventListener('click', function () {
            resetUserActiveStates();
            userUpcomingEventBtn.classList.add('active');
            userUpcomingEvent.classList.remove('d-none');
        });

        // Show Recent Events
        userRecentEventsBtn.addEventListener('click', function () {
            resetUserActiveStates();
            userRecentEventsBtn.classList.add('active');
            userRecentEvent.classList.remove('d-none');
        });

        // Initialize by showing Upcoming Events
        resetUserActiveStates();
        userUpcomingEventBtn.classList.add('active');
        userUpcomingEvent.classList.remove('d-none');
    });
</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Button and section references
        const upcomingEventBtn = document.getElementById('upcomingEventBtn');
        const recentEventsBtn = document.getElementById('recentEventsBtn');
        const upcomingEvent = document.getElementById('upcomingEvent');
        const recentEvent = document.getElementById('recentEvent');
        const pendingEventsBtn = document.getElementById('pendingEventsBtn');
        const pendingEvents = document.getElementById('pendingEvents');

        function resetActiveStates() {
            upcomingEventBtn.classList.remove('active');
            recentEventsBtn.classList.remove('active');
            pendingEventsBtn.classList.remove('active');
            upcomingEvent.classList.add('d-none');
            recentEvent.classList.add('d-none');
            pendingEvents.classList.add('d-none');

        }

        upcomingEventBtn.addEventListener('click', function () {
            resetActiveStates();
            upcomingEventBtn.classList.add('active');
            upcomingEvent.classList.remove('d-none');
        });

        recentEventsBtn.addEventListener('click', function () {
            resetActiveStates();
            recentEventsBtn.classList.add('active');
            recentEvent.classList.remove('d-none');
        });

        pendingEventsBtn.addEventListener('click', function () {
            resetActiveStates();
            pendingEventsBtn.classList.add('active');
            pendingEvents.classList.remove('d-none');
        });

        resetActiveStates();
        upcomingEventBtn.classList.add('active');
        upcomingEvent.classList.remove('d-none');
    });

    
</script>

<script>
    $(document).ready(function () {
        if ($.fn.DataTable) {
            $('#contentApprovalTable').DataTable({
                paging: true,
                lengthChange: true,
                searching: true,
                ordering: true,
                info: true,
                autoWidth: false,
                responsive: true
            });
        } else {
            console.warn("DataTable plugin not loaded.");
        }
    });

</script>


<script>
    function toggleLike(button, postId) {
        const icon = button.querySelector('.input-icon-addon i');
        const isLiked = button.getAttribute('data-isliked') === "true"; // Read current state
        const likeCountElement = button.closest('.post').querySelector('.like-count'); // Locate the like count element

        fetch('/Home/ToggleLike', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postId, isLiked })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update button state
                if (isLiked) {
                    icon.classList.remove('fas');
                    icon.classList.add('far');
                    button.setAttribute('data-isliked', "false");
                } else {
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                    button.setAttribute('data-isliked', "true");
                }

                // Update the like count
                if (likeCountElement) {
                    likeCountElement.innerHTML = `<i class="fas fa-heart"></i> ${data.likeCount}`;
                }
            } else {
                console.error('Failed to toggle like');
            }
        })
        .catch(error => console.error('Error:', error));
    }
</script>


<script>
    // Force modal cleanup after close
    function forceModalClose() {
        $('#viewEventModal').modal('hide'); // Hide the modal explicitly
        $('body').removeClass('modal-open'); // Remove modal-open class
        $('.modal-backdrop').remove(); // Remove the lingering backdrop
        $('body').css('padding-right', ''); // Reset body padding
    }

    // Ensure modal cleanup on 'hidden.bs.modal' event
    $(document).ready(function () {
        $('#viewEventModal').on('hidden.bs.modal', function () {
            $('.modal-backdrop').remove();
            $('body').removeClass('modal-open');
            $('body').css('padding-right', '');
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const cancelRequestButton = document.getElementById('cancelRequestButton');
        const cancelRequestForm = document.getElementById('cancelRequestForm');

        cancelRequestButton.addEventListener('click', function () {
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you really want to cancel your join request?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    cancelRequestForm.submit();
                }
            });
        });
    });
</script>
<script>
    function openPrintDialog() {
        // Open the PDF report in a new tab
        var url = '@Url.Action("GenerateEventReport", "Home", new { groupId = Model.Group.id })';
        var printWindow = window.open(url, '_blank');

        // Trigger the print dialog after the PDF is loaded
        printWindow.onload = function () {
            printWindow.print();
        };
    }
</script>
<script>
    function submitComment(form, postId) {
        event.preventDefault(); // Prevent normal form submission

        const commentInput = form.querySelector("input[name='comment']");
        const commentText = commentInput.value;

        if (!commentText.trim()) {
            alert("Comment cannot be empty.");
            return;
        }

        const formData = new URLSearchParams(new FormData(form));

        fetch('/Home/AddComment', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                commentInput.value = ''; // Clear the input field

                const commentsSection = document.querySelector(`#comments-section-${postId}`);
                const newComment = `
                    <div class="post-header">
                        <img src="${data.comment.profileImage}" alt="User Avatar" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">
                        <div class="group-info">
                            <div class ="group-name" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">${data.comment.user}</div>
                            <div class ="post-content" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">${data.comment.comment}</div>
                        </div>
                    </div>
                    <br />`;
                commentsSection.insertAdjacentHTML('beforeend', newComment);
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("An unexpected error occurred. Please try again.");
        });
    }
</script>

<script>
    function submitForumComment(form, forumId) {
        event.preventDefault(); // Prevent normal form submission

        const commentInput = form.querySelector("input[name='comment']");
        const commentText = commentInput.value;

        if (!commentText.trim()) {
            alert("Comment cannot be empty.");
            return;
        }

        const formData = new URLSearchParams(new FormData(form));

        fetch('/Home/ForumComment', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                commentInput.value = ''; // Clear the input field

                const commentsSection = document.querySelector(`#forumcomments-section-${forumId}`);
                const newComment = `
                    <div class="post-header">
                        <img src="${data.comment.profileImage}" alt="User Avatar" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">
                        <div class="group-info">
                            <div class ="group-name" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">${data.comment.user}</div>
                            <div class ="post-content" style="color:#000000ad; text-shadow:1px 1px 3px rgb(255 255 255 / 0%);">${data.comment.comment}</div>
                        </div>
                    </div>
                    <br />`;
                commentsSection.insertAdjacentHTML('beforeend', newComment);
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred. Please try again.'
            });
        });

    }
</script>
<script>
    function focusCommentInput(postId) {
    const inputField = document.getElementById(`comment-input-${postId}`);
    if (inputField) {
        inputField.focus();
    }
}
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Attach event listener to all delete buttons
        document.querySelectorAll('.deleteEventButton').forEach(button => {
            button.addEventListener('click', function () {
                const eventId = this.getAttribute('data-event-id'); // Get the event ID
                const form = document.getElementById(`deleteEventForm-${eventId}`); // Find the associated form

                // Show confirmation dialog
                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you really want to delete this event? This action cannot be undone.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit(); // Submit the form if confirmed
                    }
                });
            });
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Attach event listener to all delete buttons
        document.querySelectorAll('.deletePostButton').forEach(button => {
            button.addEventListener('click', function () {
                const eventId = this.getAttribute('data-post-id'); // Get the event ID
                const form = document.getElementById(`deletePostForm-${eventId}`); // Find the associated form

                // Show confirmation dialog
                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you really want to delete this post? This action cannot be undone.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit(); // Submit the form if confirmed
                    }
                });
            });
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const mediaInput = document.getElementById("mediaFiles");
        const mediaPreview = document.getElementById("mediaPreview");

        // Reset event listeners to prevent duplication
        mediaInput.addEventListener("change", function () {
            // Clear previous previews
            mediaPreview.innerHTML = "";

            // Preview each file
            Array.from(mediaInput.files).forEach((file, index) => {
                const fileReader = new FileReader();
                fileReader.onload = function (event) {
                    // Create a preview container
                    const previewContainer = document.createElement("div");
                    previewContainer.className = "position-relative m-2";

                    // Add image or video preview
                    if (file.type.startsWith("image")) {
                        const img = document.createElement("img");
                        img.src = event.target.result;
                        img.className = "img-thumbnail";
                        img.style.maxWidth = "100px";
                        img.style.maxHeight = "100px";
                        previewContainer.appendChild(img);
                    } else if (file.type.startsWith("video")) {
                        const video = document.createElement("video");
                        video.src = event.target.result;
                        video.className = "img-thumbnail";
                        video.style.maxWidth = "100px";
                        video.style.maxHeight = "100px";
                        video.controls = true;
                        previewContainer.appendChild(video);
                    }

                    // Add remove button
                    const removeButton = document.createElement("button");
                    removeButton.type = "button";
                    removeButton.className = "btn btn-sm btn-danger position-absolute";
                    removeButton.style.top = "5px";
                    removeButton.style.right = "5px";
                    removeButton.innerHTML = "&times;";
                    removeButton.addEventListener("click", function () {
                        const filesArray = Array.from(mediaInput.files);
                        filesArray.splice(index, 1);

                        const dataTransfer = new DataTransfer();
                        filesArray.forEach((file) => dataTransfer.items.add(file));
                        mediaInput.files = dataTransfer.files; // Update the file input
                        previewContainer.remove(); // Remove the preview container
                    });

                    previewContainer.appendChild(removeButton);
                    mediaPreview.appendChild(previewContainer);
                };
                fileReader.readAsDataURL(file);
            });
        });
    });

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const eventForm = document.querySelector('form[action$="createEventForm"]');

    if (eventForm) {
        eventForm.addEventListener("submit", function (e) {
            e.preventDefault(); // Prevent default form submission

            const formData = new FormData(eventForm);

            fetch(eventForm.action, {
                method: "POST",
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Success",
                        text: data.message,
                        timer: 2000,
                        showConfirmButton: false
                    });
                    // Optionally, reload or update events list
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: data.message,
                        confirmButtonText: "OK"
                    });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "An unexpected error occurred. Please try again."
                });
            });
        });
    }
});
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const timeDropdownButton = document.getElementById('timeDropdownButton');
        const timeList = document.getElementById('timeList');
        const amButton = document.getElementById('amButton');
        const pmButton = document.getElementById('pmButton');
        const dateInput = document.getElementById('event_date_tab1');
        const hiddenTimeInput = document.getElementById('event_time_hidden');

        function generateTimeOptions(period) {
            timeList.innerHTML = ''; // Clear existing options
            const now = new Date();
            const selectedDate = new Date(dateInput.value);

            const isToday = now.toDateString() === selectedDate.toDateString();

            const isPM = period === 'PM';
            const startHour = isPM ? 12 : 0; // 12 PM for start of PM, 0 for start of AM
            const endHour = isPM ? 24 : 12; // End hour for PM or AM

            for (let hour = startHour; hour < endHour; hour++) {
                for (let minute = 0; minute < 60; minute += 30) {
                    const displayHour = hour % 12 || 12; // Convert to 12-hour format
                    const displayMinutes = minute.toString().padStart(2, '0');
                    const optionTime = `${displayHour}:${displayMinutes}`; // Time without AM/PM

                    // Check if the time should be disabled
                    let isDisabled = false;
                    if (isToday) {
                        const optionDate = new Date(selectedDate);
                        optionDate.setHours(hour, minute, 0, 0);
                        isDisabled = optionDate < now; // Disable past times if today
                    }

                    // Create a list item
                    const li = document.createElement('li');
                    li.classList.add('dropdown-item');
                    if (isDisabled) {
                        li.classList.add('disabled');
                    }
                    li.innerText = optionTime;

                    // Click event to select time
                    if (!isDisabled) {
                        li.addEventListener('click', function () {
                            timeDropdownButton.innerText = `${optionTime} ${period}`; // Add AM/PM to displayed text
                            hiddenTimeInput.value = `${optionTime} ${period}`; // Store selected time with AM/PM

                            // Manually close the dropdown after selection
                            const dropdown = bootstrap.Dropdown.getInstance(timeDropdownButton);
                            dropdown.hide();
                        });
                    }

                    timeList.appendChild(li);
                }
            }
        }

        // Event listeners for AM/PM buttons
        amButton.addEventListener('click', function (event) {
            event.stopPropagation(); // Prevent dropdown from closing
            amButton.classList.add('active');
            pmButton.classList.remove('active');

            // Clear the selected time
            timeDropdownButton.innerText = "Select Time"; // Reset dropdown button text
            hiddenTimeInput.value = ""; // Clear hidden input value

            generateTimeOptions('AM'); // Show AM options
        });

        pmButton.addEventListener('click', function (event) {
            event.stopPropagation(); // Prevent dropdown from closing
            pmButton.classList.add('active');
            amButton.classList.remove('active');

            // Clear the selected time
            timeDropdownButton.innerText = "Select Time"; // Reset dropdown button text
            hiddenTimeInput.value = ""; // Clear hidden input value

            generateTimeOptions('PM'); // Show PM options
        });

        // Event listener for date input change
        dateInput.addEventListener('change', function () {
            // Clear the selected time when the date changes
            timeDropdownButton.innerText = "Select Time"; // Reset dropdown button text
            hiddenTimeInput.value = ""; // Clear hidden input value

            const activePeriod = amButton.classList.contains('active') ? 'AM' : 'PM';
            generateTimeOptions(activePeriod); // Regenerate options based on the selected date
        });

        // Default to AM options on load
        generateTimeOptions('AM');
    });

</script>





@if (TempData["WarningMessage"] != null)
{
    <script>
        Swal.fire('Warning', '@TempData["WarningMessage"]', 'warning');
    </script>
}
@if (TempData["SuccessMessage"] != null)
{
    <script>
        Swal.fire('Success', '@TempData["SuccessMessage"]', 'success');
    </script>
}
@if (TempData["ErrorMessage"] != null)
{
    <script>
        Swal.fire('Error', '@TempData["ErrorMessage"]', 'error');
    </script>
}
