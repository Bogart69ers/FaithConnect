@using Newtonsoft.Json

@model FaithConnect.ViewModel.GroupViewModel
@{
    string profileImage = Url.Content("~/UploadedFiles/default.png");
    string userName = "User";

    var currentUserId = ViewBag.CurrentUserId;
    var userInfo = Model.UserInformation;
    var images = userInfo.Image?.ToList();
    profileImage = string.IsNullOrEmpty(images?.FirstOrDefault()?.imageFile)
        ? Url.Content("~/UploadedFiles/default.png")
        : Url.Content("~/UploadedFiles/" + images.FirstOrDefault()?.imageFile);
    userName = userInfo.first_name + " " + userInfo.last_name;
}
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Assets/Index/css/modal.css" rel="stylesheet" />
<style>
    .modal-header {
        flex-wrap: nowrap;
        justify-content: flex-start;
        gap: 10px; /* Space between profile picture and text */
        padding: 10px 15px;
        background-color: #f8f9fa;
    }

    /* Profile Picture Styling */
    .profile-picture {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 50%;
        border: 1px solid #ddd;
    }

    /* Profile Details Styling */
    .profile-details {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .profile-details h5 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        color: #333;
    }

    .profile-details small {
        font-size: 0.875rem;
        color: #777;
    }

    /* Close Button Styling */
    .modal-close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 1.8rem;
        color: #333;
        background: none;
        border: none;
        cursor: pointer;
        z-index: 1051;
        transition: transform 0.2s, color 0.2s;
    }

    .modal-close-btn:hover {
        color: #ff0000;
        transform: scale(1.2);
    }

    /* Focus effect for accessibility */
    .modal-close-btn:focus {
        outline: none;
        box-shadow: none;
    }

    /* Ensure modal content maintains proper positioning */
    .modal-content {
        position: relative;
    }
    #mediaPreview img,
    #mediaPreview video {
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .post-media .img-thumbnail {
        width: 500px;
        height: 200px; /* Fixed height for grid images */
        object-fit: cover;
        cursor: pointer;
    }

    .carousel-item img {
        height: 500px; /* Adjust the height of images in the carousel */
        object-fit: contain;
    }    

    .carousel-control-prev,
    .carousel-control-next {
        display: flex;
        margin-left: -10px;
        margin-right: -10px;
    }

    /* Hide arrows gracefully when not needed */
    .carousel-control-prev[style*="display: none"],
    .carousel-control-next[style*="display: none"] {
        display: none !important;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        filter: invert(0%) sepia(100%) saturate(0%) hue-rotate(0deg) brightness(0%) contrast(100%);
    }

    /* Optional: Adjust arrow size */
    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        width: 40px;
        height: 40px;
    }

    /* Ensure visibility on hover */
    .carousel-control-prev:hover .carousel-control-prev-icon,
    .carousel-control-next:hover .carousel-control-next-icon {
        filter: invert(0%) sepia(100%) saturate(0%) hue-rotate(0deg) brightness(0%) contrast(100%);
        opacity: 0.8;
    }
    /* New Styles for Single Image Posts */
    .single-image-container {
        display: flex;
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically if there's a set height */
        width: 100%;
        margin: 0 auto; /* Ensure centering within parent container */
    }

    /* Ensure the image fits well */
    .single-post-image {
        width: 1000px; /* Prevent the image from overflowing */
        max-height: 500px; /* Adjust max height if necessary */
        object-fit: contain; /* Maintain image proportions */
        border-radius: 8px; /* Optional: Add rounded corners */
    }
    .modals {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modals-content {
        background-color: white;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 35%;
    }
    .masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        grid-auto-rows: 200px;
        gap: 10px;
    }

    .masonry-item {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
    }

    .masonry-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        position:absolute;
    }

    .masonry-item.overlay-item {
        filter: brightness(0.7);
    }

    .masonry-item.overlay-item .overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.6);
        color: #fff;
        font-size: 1.5rem;
        font-weight: bold;
        padding: 8px 12px;
        border-radius: 4px;
        z-index: 2;
    }
    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        position: absolute;
        top: 10px;
        right: 25px;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .event-day {
        cursor: pointer;
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 5px;
    }

    .tooltip {
        position: absolute;
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        display: none;
        z-index: 1050;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>
<div class="container mt--5 pt--5">
    <div class="row" style="flex-wrap:nowrap">
        <div class="col-md-8">
            @if (Model.Posts != null && Model.Posts.Any())
            {
                foreach (var post in Model.Posts)
                {
                    var user = Model.UserInformations.FirstOrDefault(u => u.userId == post.createdBy);
                    string profilePicture = user != null && user.Image != null && user.Image.Any()
                                        ? Url.Content("~/UploadedFiles/" + user.Image.FirstOrDefault()?.imageFile)
                                        : Url.Content("~/UploadedFiles/default.png"); // Fallback to default profile picture
                    string fullName = user != null ? $"{user.first_name} {user.last_name}" : "Unknown";

                    <div class="post col-md-20">
                        <!-- Post Header -->
                        <div class="post-header">
                            <img src="@profilePicture" alt="Group Icon" class="group-icon">
                            <div class="group-info">
                                <div class="group-name">@post.Groups.groupName</div>
                                <div class="post-time">Posted by @post.UserAccount.username</div>
                                <div class="post-time">
                                    @if (post.date_created.HasValue)
                                    {
                                        @post.date_created.Value.ToString("MMMM dd, yyyy")
                                    }
                                    else
                                    {
                                        <span>No date provided</span>
                                    }
                                </div>                            
                            </div>
                            <div class="post-options">
                                <button class="options-button">...</button>
                                <div class="options-menu">
                                    <a href="#">Hide Post</a>
                                    <a href="#">Save post</a>
                                </div>
                            </div>
                        </div>
                        <!-- Post Content -->
                        <div class="post-content">
                            <p>@post.content</p>
                        </div>
                        @if (post.PostMedia != null && post.PostMedia.Any(m => m.mediaType.StartsWith("Image", StringComparison.OrdinalIgnoreCase)))
                        {
                            var imageMedia = post.PostMedia.Where(m => m.mediaType.StartsWith("Image", StringComparison.OrdinalIgnoreCase)).ToList();
                            var imageCount = imageMedia.Count;

                            if (imageCount == 1)
                            {
                                // Single Image
                                var singleImage = imageMedia.FirstOrDefault();
                                if (singleImage != null)
                                {
                                    <div class="post-media mt-2">
                                        <button type="button" class="btn btn-link p-0" data-toggle="modal" data-target="#imageModals"
                                                data-images='["@Url.Content(singleImage.mediaFile)"]'
                                                data-profile-picture="@Url.Content(profilePicture)"
                                                data-user-name="@fullName"
                                                data-post-title="@post.content">
                                            <img src="@Url.Content(singleImage.mediaFile)" alt="Post Image" class="img-fluid single-post-image" loading="lazy">
                                        </button>
                                    </div>
                                }
                            }
                            else if (imageCount > 1)
                            {
                                // Multiple Images in Masonry Grid
                                var imageUrls = imageMedia.Select(m => Url.Content(m.mediaFile)).ToList();
                                var imageUrlsJson = JsonConvert.SerializeObject(imageUrls);

                                <div class="post-media-wrapper">
                                    <div class="post-media masonry-grid">
                                        @for (var index = 0; index < imageUrls.Count; index++)
                                        {
                                            var imageUrl = imageUrls[index];
                                            <div class="masonry-item @(index == 4 && imageCount > 5 ? "overlay-item" : "")">
                                                <button type="button" class="btn btn-link p-0" data-toggle="modal" data-target="#imageModals"
                                                        data-images='@Html.Raw(imageUrlsJson)'
                                                        data-profile-picture="@Url.Content(profilePicture)"
                                                        data-user-name="@fullName"
                                                        data-post-title="@post.content">
                                                    <img src="@imageUrl" alt="Post Image" class="img-fluid masonry-image" loading="lazy">
                                                    @if (index == 4 && imageCount > 5)
                                                    {
                                                        <div class="overlay">+@(imageCount - 5)</div>
                                                    }
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }


                        }
                        @if (post.PostMedia != null && post.PostMedia.Any(m => m.mediaType.StartsWith("Video", StringComparison.OrdinalIgnoreCase)))
                        {
                            var videoMedia = post.PostMedia.Where(m => m.mediaType.StartsWith("Video", StringComparison.OrdinalIgnoreCase)).ToList();

                            <div class="post-media mt-2">
                                @foreach (var media in videoMedia)
                                {
                                    <video controls class="img-fluid mb-2" style="max-width: 100%; height: auto;">
                                        <source src="@Url.Content(media.mediaFile)" type="video/mp4">
                                        Your browser does not support the video tag.
                                    </video>
                                }
                            </div>
                        }
                        <!-- Tags Section -->
                        <div>
                            @{
                                var tags = ViewBag.TagsByPost != null && ViewBag.TagsByPost.ContainsKey(post.id) ? ViewBag.TagsByPost[post.id] as List<string> : new List<string>();

                                if (tags != null && tags.Count > 0) // Use Count instead of Any
                                {
                                    foreach (var tag in tags)
                                    {
                                        <span class="badge badge-info" style="margin-right: 5px;" hidden>@tag</span>
                                    }
                                }
                                else
                                {
                                    <span hidden>No tags</span>
                                }
                            }
                        </div>
                        <!-- Post Actions -->
                        <div class="post-actions mt-2">
                            <button class="action-button" onclick="toggleLike(this)">
                                <span class="input-icon-addon"><i class="far fa-heart"></i></span> Like
                            </button>
                            <button class="action-button">
                                <span class="input-icon-addon"><i class="fas fa-comment-alt"></i></span> Interact
                            </button>
                            <button class="action-button">
                                <span class="input-icon-addon"><i class="fas fa-retweet"></i></span> Repost
                            </button>
                        </div>
                        <div class="post-comments">
                            <div class="post-time" style="font-size:13px; font-weight:bold; padding:10px 0 10px 0" >Interactions</div>
                            @if (post.PostComments != null)
                            {
                                foreach (var com in post.PostComments)
                                {
                                    string profileImages = Url.Content("~/UploadedFiles/default.png");

                                    var commentUserInfo = Model.UserInformations.FirstOrDefault(u => u.userId == com.userId);
                                    var image = commentUserInfo.Image?.ToList();
                                    profileImages = string.IsNullOrEmpty(image?.FirstOrDefault()?.imageFile)
                                    ? Url.Content("~/UploadedFiles/default.png")
                                    : Url.Content("~/UploadedFiles/" + image.FirstOrDefault()?.imageFile);


                                    <div class="post-header">
                                        <img src="@profileImages" alt="User Avatar" class="group-icon" style="width: 45px; height: 45px; object-fit: cover;">

                                        <div class="group-info">
                                            <div class="group-name">@(commentUserInfo != null ? commentUserInfo.first_name + " " + commentUserInfo.last_name : "Unknown User")</div>
                                            <div class="post-content">@com.comment</div>
                                        </div>
                                    </div>
                                    <br />
                                 }

                              }
                              else
                              {
                                 <p>No comments yet.</p>
                              }
                        </div>
                        <!-- Interact Input -->
                        <form action="@Url.Action("AddComment", "Home")" method="post" style="display: inline;">
                            <div class="post-interact mt-3">
                                <input type="hidden" name="groupId" value="@post.groupId" />
                                <input type="hidden" name="postId" value="@post.id" />
                                <input type="hidden" name="userId" value="@currentUserId" />
                                <input type="hidden" name="redirectPage" value="Index" />
                                <img src="@profileImage" alt="Avatar" class="user-icon" style="width: 45px; height: 45px; object-fit: cover">
                                <input type="text" name="comment" placeholder="Interact as @userName" class="comment-input">
                                <button type="submit" class="action-button"><span class="input-icon-addon"><i class="fas fa-paper-plane"></i></span></button>
                            </div>
                        </form>
                    </div>
               }
            }
            
        </div>
        <div class="col-lg-4">
            <div class="events-container bg-white p-4 shadow-sm border-rad20" style="position:sticky; top:10%;">
                <div class="event-buttons">
                    <button id="upcomingEventsBtn" class="event-button active">Upcoming Events</button>
                </div>
                <div id="upcomingEvent">
                    @foreach (var events in Model.Events.Where(g => g.userId == currentUserId && g.status == 1 && g.Event.event_date > DateTime.Now).OrderByDescending(g => g.Event.event_date))
                    {
                        <div class="event-item mb-3 p-3 bg-light rounded d-flex" data-date="@events.Event.event_date.Value.ToString("yyyy-MM-dd")">
                            <div class="event-date me-3 text-center">
                                <div class="event-day mb-1" style="color:black;">
                                    @events.Event.event_date.Value.ToString("MMM")
                                </div>
                                <div class="event-day mb-1">
                                    @(events.Event.event_date.HasValue ? events.Event.event_date.Value.ToString("dd") : "N/A")
                                </div>
                                <div class="event-time">@(events.Event.event_date.HasValue ? events.Event.event_date.Value.ToString("hh:mm tt") : "N/A")</div>
                            </div>
                            <div class="event-details">
                                <div class="event-day-of-week mb-1">@events.Event.event_date.Value.ToString("dddd")</div>
                                <button class="action-button event-title mb-1"
                                        data-title="@events.Event.title"
                                        data-eventId="@events.Event.id"
                                        data-groupId="@events.Event.groupId"
                                        data-description="@events.Event.description"
                                        data-time="@(events.Event.event_date.HasValue ? events.Event.event_date.Value.ToString("hh:mm tt") : "N/A")"
                                        data-date="@events.Event.event_date.Value.ToString("MMMM d, yyyy")">
                                    @events.Event.title
                                </button>
                                <div class="event-description">@events.Event.description</div>
                            </div>
                        </div>
                    }
                </div>

                <div id="recentEvents" class="d-none">
                    <!-- Recent events will be populated similarly to upcoming events -->
                </div>
            </div>
        </div>
    </div>
</div>

<div id="eventModal" class="modals">
    <div class="modal-content" style="width:50%; background-color: white; margin: 15% auto; padding: 20px; border: 1px solid #888;">
        <span id="closeModal" class="close" >&times;</span>
        <h3 id="eventTitle"></h3>
        <p id="eventDate"></p> <!-- Placeholder for event date -->
        <p id="eventTime"></p> <!-- Placeholder for event time -->
        <p id="eventDescription"></p>
    </div>
</div>

<div class="modal fade" id="imageModals" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <button type="button" class="modal-close-btn" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>

            <div class="modal-header align-items-center border-0 d-flex">
                <img id="modalProfilePicture" src="" alt="Profile Picture" class="rounded-circle profile-picture">
                <div class="ml-3 profile-details">
                    <h5 id="modalUserName" class="mb-0"></h5>
                    <p id="modalPostTitle"></p>
                </div>
            </div>

            <div class="modal-body p-0">
                <!-- Bootstrap Carousel -->
                <div id="carouselExample" class="carousel slide" data-ride="carousel">
                    <div class="carousel-inner" id="carouselImages">
                        <!-- Dynamically populated images will go here -->
                    </div>
                    <a class="carousel-control-prev" href="#carouselExample" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#carouselExample" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>
            <div class="modal-footer p-2">
                <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('[data-toggle="modal"]').forEach(button => {
            button.addEventListener('click', function () {
                // Get image array for carousel
                const images = JSON.parse(this.getAttribute('data-images') || '[]');
                const carouselInner = document.getElementById('carouselImages');
                carouselInner.innerHTML = ''; // Clear previous content

                // Populate Carousel
                if (images.length > 0) {
                    images.forEach((src, index) => {
                        const isActive = index === 0 ? 'active' : '';
                        carouselInner.innerHTML += `
                            <div class="carousel-item ${isActive}">
                                <img src="${src}" class="d-block w-100" alt="Post Image">
                            </div>
                        `;
                    });

                    // Show/Hide Arrows based on image count
                    const prevArrow = document.querySelector('.carousel-control-prev');
                    const nextArrow = document.querySelector('.carousel-control-next');

                    if (images.length === 1) {
                        prevArrow.style.display = 'none';
                        nextArrow.style.display = 'none';
                    } else {
                        prevArrow.style.display = 'flex';
                        nextArrow.style.display = 'flex';
                    }
                }

                // Populate Profile Details
                const profilePicture = this.getAttribute('data-profile-picture');
                const userName = this.getAttribute('data-user-name');
                const postTitle = this.getAttribute('data-post-title');

                document.getElementById('modalProfilePicture').src = profilePicture || 'https://via.placeholder.com/50';
                document.getElementById('modalUserName').innerText = userName || 'Unknown User';
                document.getElementById('modalPostTitle').innerText = postTitle || '';

                // Reset carousel to the first slide
                $('#carouselExample').carousel(0);
            });
        });
    });
</script>
<script>
        function toggleLike(button) {
            const icon = button.querySelector('.input-icon-addon i');
            const isLiked = icon.classList.contains('fas');

            if (isLiked) {
                icon.classList.remove('fas');
                icon.classList.add('far');
                button.innerHTML = '<span class="input-icon-addon"><i class="far fa-heart"></i></span> Like';
            } else {
                icon.classList.remove('far');
                icon.classList.add('fas');
                button.innerHTML = '<span class="input-icon-addon"><i class="fas fa-heart"></i></span> Liked';
            }
        }
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Button and section references
        const upcomingEventBtn = document.getElementById('upcomingEventBtn');
        const recentEventsBtn = document.getElementById('recentEventsBtn');
        const upcomingEvent = document.getElementById('upcomingEvent');
        const recentEvent = document.getElementById('recentEvent');

        function resetActiveStates() {
            upcomingEventBtn.classList.remove('active');
            recentEventsBtn.classList.remove('active');
            upcomingEvent.classList.add('d-none');
            recentEvent.classList.add('d-none');
        }

        upcomingEventBtn.addEventListener('click', function () {
            resetActiveStates();
            upcomingEventBtn.classList.add('active');
            upcomingEvent.classList.remove('d-none');
        });

        recentEventsBtn.addEventListener('click', function () {
            resetActiveStates();
            recentEventsBtn.classList.add('active');
            recentEvent.classList.remove('d-none');
        });

        resetActiveStates();
        upcomingEventBtn.classList.add('active');
        upcomingEvent.classList.remove('d-none');
    });

    document.addEventListener("DOMContentLoaded", function () {
        const currentMonthEl = document.getElementById('currentMonth');
        const prevMonthBtn = document.getElementById('prevMonth');
        const nextMonthBtn = document.getElementById('nextMonth');
        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();

        function renderCalendar() {
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            const firstDay = new Date(currentYear, currentMonth, 1).getDay();
            const calendarBody = document.querySelector('.calendar-container tbody');
            const eventItems = Array.from(document.querySelectorAll('.event-item'));
            const eventDetails = eventItems.map(item => ({
                date: new Date(item.getAttribute('data-date')),
                title: item.querySelector('.event-title').textContent,
                description: item.querySelector('.event-description').textContent
            }));

            calendarBody.innerHTML = '';
            let date = 1;

            for (let i = 0; i < 6; i++) {
                const row = document.createElement('tr');
                for (let j = 0; j < 7; j++) {
                    const cell = document.createElement('td');
                    if (i === 0 && j < firstDay) {
                        cell.appendChild(document.createTextNode(''));
                    } else if (date > daysInMonth) {
                        break;
                    } else {
                        const span = document.createElement('span');
                        span.textContent = date;
                        const cellDate = new Date(currentYear, currentMonth, date);
                        const event = eventDetails.find(event =>
                            event.date.getDate() === date &&
                            event.date.getMonth() === currentMonth &&
                            event.date.getFullYear() === currentYear
                        );

                        if (event) {
                            cell.classList.add('event-day');
                            cell.setAttribute('data-title', event.title);
                            cell.setAttribute('data-description', event.description);

                            // Add event for showing tooltip
                            cell.addEventListener('click', function () {
                                eventTitle.textContent = event.title;
                                eventDate.textContent = `Date: ${event.date.toLocaleDateString()}`;
                                eventTime.textContent = `Time: ${event.eventTime}`;
                                eventDescription.textContent = event.description;
                                eventModal.style.display = 'block';
                            });

                            cell.addEventListener('mouseout', function () {
                                const tooltip = document.getElementById('tooltip');
                                tooltip.style.display = 'none';
                            });
                        }

                        cell.appendChild(span);
                        row.appendChild(cell);
                        date++;
                    }
                }
                calendarBody.appendChild(row);
            }
            currentMonthEl.textContent = new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' });
        }

        prevMonthBtn.addEventListener('click', function () {
            currentMonth = currentMonth === 0 ? 11 : currentMonth - 1;
            currentYear = currentMonth === 11 ? currentYear - 1 : currentYear;
            renderCalendar();
        });

        nextMonthBtn.addEventListener('click', function () {
            currentMonth = currentMonth === 11 ? 0 : currentMonth + 1;
            currentYear = currentMonth === 0 ? currentYear + 1 : currentYear;
            renderCalendar();
        });

        renderCalendar();
    });

    const modal = document.getElementById('eventModal');
    const closeModal = document.getElementById('closeModal');

    document.querySelectorAll('.event-title').forEach(button => {
        button.addEventListener('click', function () {
            const title = this.getAttribute('data-title');
            const description = this.getAttribute('data-description');
            const eventDate = this.getAttribute('data-date');  // Get event date from data attribute
            const eventTime = this.getAttribute('data-time');  // Get event time from data attribute

            // Update modal content
            document.getElementById('eventTitle').textContent = title;
            document.getElementById('eventDescription').textContent = description;
            document.getElementById('eventDate').textContent = `Date: ${eventDate}`;  // Set event date in modal
            document.getElementById('eventTime').textContent = `Time: ${eventTime}`;  // Set event time in modal

            // Show the modal
            document.getElementById('eventModal').style.display = 'block';
        });
    });

    closeModal.addEventListener('click', function () {
        modal.style.display = 'none';
    });

    window.addEventListener('click', function (event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
</script>